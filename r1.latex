% Page setup
\documentclass[11pt]{memoir}
\setstocksize{9.69in}{7.44in}
\settrimmedsize{\stockheight}{\stockwidth}{*}
\setlrmarginsandblock{3.5cm}{2.5cm}{*}
\setulmarginsandblock{2cm}{3cm}{*}
\checkandfixthelayout 
\setheadfoot{\onelineskip}{2\onelineskip}

% Activate to begin paragraphs with an empty line rather than an indent
\usepackage{parskip}    	
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}	

\usepackage{graphicx}					
\usepackage{amssymb}

%SetFonts
\usepackage[T1]{fontenc}
\usepackage{newpxtext,newpxmath}

%Images
\usepackage{graphicx}
% We will generate all images so they have a width 1\maxwidth. This means
% that they will get their normal width if they fit onto the page, but
% are scaled down if they would overflow the margins.
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth
\else\Gin@nat@width\fi}
\makeatother
\let\Oldincludegraphics\includegraphics
\renewcommand{\includegraphics}[1]{\Oldincludegraphics[width=1\maxwidth]{#1}}
\usepackage{rotating}
\usepackage[margin=10pt,font=small,labelfont=bf]{caption}
\captionsetup[figure]{labelfont={bf,it},textfont={bf,it}}
 \setfloatlocations{figure}{thpb}


% Links
\usepackage[hyphens]{url}
\usepackage[unicode=true]{hyperref}
\hypersetup{breaklinks=true,
            bookmarks=true,
            pdfauthor={},
            pdftitle={},
            colorlinks=false,
            urlcolor=black,
            linkcolor=black,
            pdfborder={0 0 0}}

% Footers / Page Numbers            (FIX ME)
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
  \renewcommand{\headrulewidth}{0pt}
  \fancyfoot[LE, RO]{\thepage}
  \fancyfoot[C]{\textsl}

% Tables            
\usepackage{longtable,booktabs}
\usepackage[width=.8\textwidth]{caption}
% These lines are needed to make table captions work with longtable:
\makeatletter
\def\fnum@table{\tablename~\thetable}
\makeatother
\usepackage{rotating}
 \setfloatlocations{table}{thpb}


% Code Sections
\usepackage{listings}
\newcommand{\passthrough}[1]{#1}
\lstnewenvironment{code}{\lstset{basicstyle=\small\ttfamily}}{}


%Links as Notes
\DeclareRobustCommand{\href}[2]{#2\footnote{\url{#1}}}
 \renewcommand{\footnotesize}{\fontsize{6.5pt}{8.5pt}\selectfont}


%Sections
\chapterstyle{veelo}
\setlength{\beforechapskip}{20pt}
\setsechook{\hangsecnum}
\setcounter{secnumdepth}{5}

\begin{document}

\frontmatter

\title{Risk-First Software Development: The Menagerie}
\author{Rob Moffat}

\begin{titlingpage}

\hspace{0.05\textwidth}

\centering

{\Huge\bfseries\textsc{Risk-First}}\\[2\baselineskip]

{\Huge\bfseries\textsc{Software Development}}\\[1\baselineskip]

{\Huge\textit{Volume 1: The Menagerie}}\\[4\baselineskip]

{\Oldincludegraphics[width=0.5\textwidth]{images/R1_logo_grue.png}}\\[4\baselineskip]

{\Huge\textsc{Rob Moffat}}


\end{titlingpage}

\hypertarget{risk-first-the-menagerie}{%
\section{Risk-First: The Menagerie}\label{risk-first-the-menagerie}}

By Rob Moffat

Copyright Â© 2018 Kite9 Ltd.

All rights reserved. No part of this publication may be reproduced,
distributed, or transmitted in any form or by any means, including
photocopying, recording, or other electronic or mechanical methods,
without the prior written permission of the publisher, except in the
case of brief quotations embodied in critical reviews and certain other
noncommercial uses permitted by copyright law. For permission requests,
write to the publisher, addressed ``Attention: Permissions
Coordinator,'' at the address below.

ISBN: 9781717491855

\hypertarget{credits}{%
\subsection{Credits}\label{credits}}

tbd

Cover Images: Biodiversity Heritage Library. Biologia
Centrali-Americana. Insecta. Rhynchota. Hemiptera-Homoptera. Volume 1
(1881-1905)

Cover Design By P. Moffat (\texttt{peter@petermoffat.com})

Thanks to:

\hypertarget{books-in-the-series}{%
\subsection{Books In The Series}\label{books-in-the-series}}

\begin{itemize}
\tightlist
\item
  \textbf{Risk-First: The Menagerie:} Book one of the Risk-First series
  argues the case for viewing \emph{all} of the activities on a software
  project through the lens of \emph{managing risk}. It introduces the
  menagerie of different risks you're likely to meet on a software
  project, naming and classifying them so that we can try to understand
  them better.
\item
  \textbf{Risk-First: Tools and Practices:} Book two of the Risk-First
  series explores the relationship between software project risks and
  the tools and practices we use to mitigate them. Due for publication
  in 2020.
\end{itemize}

\hypertarget{online}{%
\subsection{Online}\label{online}}

Material for the books is freely available to read, drawn from
\texttt{risk-first.org}.

\hypertarget{published-by}{%
\subsection{Published By}\label{published-by}}

\begin{verbatim}
Kite9 Ltd.
14 Manor Close
Colchester
CO6 4AR
\end{verbatim}

\newpage
\setcounter{tocdepth}{0}
\tableofcontents

\hypertarget{preface}{%
\chapter{Preface}\label{preface}}

Welcome to Risk-First!

Let's cover some of the big questions up-front: The why, what, who, how
and where of \emph{The Menagerie}.

\hypertarget{why}{%
\section{Why}\label{why}}

\begin{quotation}

\begin{quote}
``Scrum, Waterfall, Lean, Prince2: what do they all have in common?''
\end{quote}

\end{quotation}

I've started this because, on my career journey, I've noticed that the
way I do things doesn't seem to match up with the way the books
\emph{say} it should be done. And, I found this odd and wanted to
explore it further. Hopefully, you, the reader, will find something of
use in this.

I started with this observation: \emph{Development Teams} put a lot of
faith in methodology. Sometimes, this faith is often so strong it
borders on religion. (Which in itself is a concern.) For some, this is
Prince2. For others, it might be Lean or Agile.

\emph{Developers} put a lot of faith in \emph{particular tools} too.
Some developers are pro-or-anti-Java, others are pro-or-anti-XML. All of
them have their views coloured by their \emph{experiences} (or lack of)
with these tools. Was this because their past projects \emph{succeeded}
or \emph{failed} because of them?

As time went by, I came to see that the choice of methodology, process
or tool was contingent on the problem being solved, and the person
solving the problem. We don't face a shortage of tools in IT, or a
shortage of methodologies, or a shortage of practices. Essentially, that
all the tools and methodologies that the industry had supplied were
there to help \emph{minimize the risk of my project failing}.

This book considers that perspective: that building software is all
about \emph{managing risk}, and that these methodologies are
acknowledgements of this fact, and they differ because they have
\emph{different ideas} about which are the most important \emph{risks to
manage}.

\hypertarget{what-this-is}{%
\section{What This Is}\label{what-this-is}}

Hopefully, after reading this, you'll come away with:

\begin{itemize}
\tightlist
\item
  An appreciation of how risk underpins everything we do as developers,
  whether we want it to or not.
\item
  A framework for evaluating methodologies, tools and practices and
  choosing the right one for the task-at-hand.
\item
  A recontextualization of the software process as being an exercise in
  mitigating different kinds of risk.
\item
  The tools to help you decide when a methodology or tool is
  \emph{letting you down}, and the vocabulary to argue for when it's a
  good idea to deviate from it.
\end{itemize}

This is not intended to be a rigorously scientific work: I don't believe
it's possible to objectively analyze a field like software development
in any meaningful, statistically significant way. (For one, things just
change too fast.)

\begin{quotation}

``I have this Pattern''

\sourceatright{\href{http://c2.com/ppr/wiki/WikiPagesAboutWhatArePatterns/HaveThisPattern.html}{\textemdash  Attributed to Ward Cunningham, \emph{Have This Pattern, C2 Wiki}}}
\end{quotation}

Does that diminish it? If you have visited the
\href{https://tvtropes.org}{TVTropes} website, you'll know that it's a
set of web-pages describing \emph{common patterns} of narrative,
production, character design etc. to do with fiction. For example:

\begin{quotation}

``Sometimes, at the end of a Dream Sequence or an All Just a Dream
episode, after the character in question has woken up and demonstrated
any {[}lesson{]} that the dream might have been communicating, there's
some small hint that it wasn't a dream after all, even though it quite
obviously was\ldots{} right?.''

\sourceatright{\href{https://tvtropes.org/pmwiki/pmwiki.php/Main/OrWasItADream}{\textemdash  Or Was It a Dream?, \emph{TVTropes}}}
\end{quotation}

Is it scientific? No.~Is it correct? Almost certainly. TVTropes is a set
of \emph{empirical patterns} for how stories on TV and other media work.
It's really useful, and a lot of fun. (Warning: it's also incredibly
addictive).

In the same way, ``\href{http://amzn.eu/d/3cOwTkH}{Design Patterns:
Elements of Reusable Object-Oriented Software}'', is a book detailing
patterns of \emph{structure} within Object-Oriented programming, such
as:

\begin{quotation}

``{[}The{]} Adapter {[}pattern{]} allows classes with incompatible
interfaces to work together by wrapping its own interface around that of
an already existing class\ldots{}''

\sourceatright{\href{https://en.wikipedia.org/wiki/Design_Patterns}{\textemdash  Design Patterns, \emph{Wikipedia}}}
\end{quotation}

\hypertarget{patterns-for-practitioners}{%
\subsection{Patterns For
Practitioners}\label{patterns-for-practitioners}}

Design Patterns aimed to be a set of \emph{useful} patterns which
practitioners could use in their software to achieve certain goals. ``I
have this pattern'' was a phrase used to describe how they had seen a
certain set of constraints before, and how they had solved it in
software.

This book was a set of experts handing down their battle-tested
practices for other developers to use, and, whether you like patterns or
not, knowing them is an important part of being a software developer, as
you will see them used everywhere you go and probably use them yourself.

In the same way, Risk-First aims to be a set of \emph{Patterns for
Software Risk}. Hopefully after reading this book, you will see where
risk hides in software projects, and have a name for it when you see it.

\hypertarget{towards-a-periodic-table}{%
\subsection{Towards a ``Periodic
Table''}\label{towards-a-periodic-table}}

In the latter chapters of ``The Menagerie'' we try to assemble these
risk patterns into a cohesive whole. Projects fail because of risks, and
risks arise from predictable sources.

\hypertarget{what-this-is-not}{%
\subsection{What This is Not}\label{what-this-is-not}}

This is not intended to be a rigorously scientific work: I don't believe
it's possible to objectively analyze a field like software development
in any meaningful, statistically significant way. (For one, things just
change too fast.)

Neither is this site isn't going to be an exhaustive guide of every
possible software development practice and methodology. That would just
be too long and tedious.

Neither is this really a practitioner's guide to using any particular
methodology: If you've come here to learn the best way to do
Retrospectives, then you're in the wrong place. There are plenty of
places you can find that information already. Where possible, this site
will link to or reference concepts on Wikipedia or the wider internet
for further reading on each subject.

\hypertarget{who}{%
\section{Who}\label{who}}

This work is intended to be read by people who work on software
projects, and especially those who are involved in managing software
projects.

If you work collaboratively with other people in a software process, you
should find Risk-First a useful lexicon of terms to help describe the
risks you face.

But here's a warning: This is going to be a depressing book to read. It
is book one of a two-book series, but in \textbf{Book One} you only get
to meet the bad guy.

While \textbf{Book Two} is all about \emph{how to succeed}, This book is
all about how projects \emph{fail}. In it, we're going to try and put
together a framework for understanding the risk of failure, in order
that we can reconstruct our understanding of our activities on a project
based on avoiding it.

So, if you are interested in \emph{avoiding your project failing}, this
is probably going to be useful knowledge.

\hypertarget{for-developers}{%
\subsection{For Developers}\label{for-developers}}

Risk-First is a tool you can deploy to immediately improve your ability
to plan your work.

Frequently, as developers we find software methodologies ``done to us''
from above. Risk-First is a toolkit to help \emph{take apart}
methodologies like Scrum, Lean and Prince2, and understand them.
Methodologies are \emph{bicycles}, rather than \emph{religions}. Rather
than simply \emph{believing}, we can take them apart and see how they
work.

\hypertarget{for-project-managers-and-team-leads}{%
\subsection{For Project Managers and Team
Leads}\label{for-project-managers-and-team-leads}}

All too often, Project Managers don't have a full grasp of the technical
details of their projects. And this is perfectly normal, as the
specialization belongs below them. However, projects fail because risks
materialize, and risks materialize because the devil is in those
details.

This seems like a lost cause, but there is hope: the ways in which risks
materialize on technical projects is the same every time. With
Risk-First we are attempting to name each of these types of risk, which
allows for a dialog with developers about which risks they face, and the
order they should be tackled.

Risk-First allows a project manager to pry open the black box of
development and talk with developers about their work, and how it will
affect the project. It is another tool in the (limited) arsenal of
techniques a project manager can bring to bear on the task of delivering
a successful project.

\hypertarget{how}{%
\section{How}\label{how}}

One of the original proponents of the Agile Manifesto, Kent Beck, begins
his book Extreme Programming by stating:

\begin{quotation}

``It's all about risk''

\sourceatright{\href{http://amzn.eu/d/gUQjnbF}{\textemdash  Kent Beck, \emph{Extreme Programming Explained}}}
\end{quotation}

This is a promising start. From there, he introduces his methodology,
Extreme Programming, and explains how you can adopt it in your team, the
features to observe and the characteristics of success and failure.
However, while \emph{Risk} has clearly driven the conception of Extreme
Programming, there is no clear model of software risk underpinning the
work, and the relationship between the practices he espouses and the
risks he is avoiding are hidden.

In this book, we are going to introduce a model of software project
risk. This means that in \textbf{Book Two} (Risk-First: Tools and
Practices), we can properly analyse Extreme Programming (and Scrum,
Waterfall, Lean and all the others) and \emph{understand} what drives
them. Since they are designed to deliver successful software projects,
they must be about mitigate risks, and we will uncover \emph{exactly
which risks are mitigated} and \emph{how they do it}.

\hypertarget{where}{%
\section{Where}\label{where}}

All of the material for this book is available Open Source on
\href{https://github.com}{github.com}, and at the
\href{https://risk-first.org}{risk-first.org} website. Please visit,
your feedback is appreciated.

There is no compulsion to buy a print or digital version of the book,
but we'd really appreciate the support. So, if you've read this and
enjoyed it, how about buying a copy for someone else to read?

\hypertarget{a-note-on-references}{%
\subsection{A Note on References}\label{a-note-on-references}}

Where possible, references are to the
\href{https://wikipedia.org}{Wikipedia} website. Wikipedia is not
perfect. There is a case for linking to the original articles and
papers, but by using Wikipedia references are free and easy for everyone
to access, and hopefully will exist for a long time into the future.

On to The Executive Summary

\hypertarget{executive-summary}{%
\chapter{Executive Summary}\label{executive-summary}}

\hypertarget{there-are-lots-of-ways-of-running-software-projects}{%
\section{1. There are Lots of Ways of Running Software
Projects}\label{there-are-lots-of-ways-of-running-software-projects}}

There are lots of different ways to look at a project in-flight. For
example, metrics such as ``number of open tickets'', ``story points'',
``code coverage'' or ``release cadence'' give us a numerical feel for
how things are going and what needs to happen next. We also judge the
health of projects by the practices used on them, such as Continuous
Integration, Unit Testing or Pair Programming.

Software methodologies, then, are collections of tools and practices:
``Agile'', ``Waterfall'', ``Lean'' or ``Phased Delivery'' all prescribe
different approaches to running a project, and are opinionated about the
way they think projects should be done and the tools that should be
used.

None of these is necessarily more ``right'' than another- they are
suitable on different projects at different times.

A key question then is: \textbf{how do we select the right tools for the
job?}

\hypertarget{we-can-look-at-projects-in-terms-of-risks}{%
\section{2. We can Look at Projects in Terms of
Risks}\label{we-can-look-at-projects-in-terms-of-risks}}

One way to examine the project in-flight is by looking at the risks it
faces.

Commonly, tools such as RAID logs and RAG status reporting are used.
These techniques should be familiar to project managers and developers
everywhere.

However, the Risk-First view is that we can go much further: that each
item of work being done on the project is to manage a particular risk.
Risk isn't something that just appears in a report, it actually drives
\emph{everything we do}.

For example:

\begin{itemize}
\tightlist
\item
  A story about improving the user login screen can be seen as reducing
  \emph{the risk of users not signing up}.
\item
  A task about improving the health indicators could be seen as
  mitigating \emph{the risk of the application failing and no-one
  reacting to it}.
\item
  Even a task as basic as implementing a new function in the application
  is mitigating \emph{the risk that users are dissatisfied and go
  elsewhere}.
\end{itemize}

One assertion of Risk-First is that \textbf{every action you take on a
project is to manage a risk.}

\hypertarget{we-can-break-down-risks-on-a-project-methodically}{%
\section{3. We Can Break Down Risks on a Project
Methodically}\label{we-can-break-down-risks-on-a-project-methodically}}

Although risk is usually complicated and messy, other industries have
found value in breaking down the types of risks that affect them and
addressing them individually.

For example:

\begin{itemize}
\tightlist
\item
  In manufacturing, \emph{tolerances} allow for calculating the
  likelihood of defects in production.
\item
  In finance, projects and teams are structured around monitoring risks
  like \emph{credit risk}, \emph{market risk} and \emph{liquidity risk}.
\item
  \emph{Insurance} is founded on identifying particular risks and
  providing financial safety-nets for when they occur, such as death,
  injury, accident and so on.
\end{itemize}

Software risks are difficult to quantify, and mostly, the effort
involved in doing so \emph{exactly} would outweigh the benefit.
Nevertheless, there is value in spending time building
\emph{classifications of risk for software}. That's what Risk-First
does: it describes a set of \emph{risk patterns} we see every day on
software projects.

With this in place, we can:

\begin{itemize}
\tightlist
\item
  Talk about the types of risks we face on our projects, using an
  appropriate language.
\item
  Anticipate Hidden Risks that we hadn't considered before.
\item
  Weigh the risks against each other, and decide which order to tackle
  them.
\end{itemize}

\hypertarget{we-can-analyse-tools-and-techniques-in-terms-of-how-they-manage-risk}{%
\section{4. We can Analyse Tools and Techniques in Terms of how they
Manage
Risk}\label{we-can-analyse-tools-and-techniques-in-terms-of-how-they-manage-risk}}

If we accept the assertion above that \emph{all} the actions we take on
a project are about mitigating risks, then it stands to reason that the
tools and techniques available to us on a project are there for
mitigating different types of risks.

For example:

\begin{itemize}
\tightlist
\item
  If we do a Code Review, we are partly trying to minimise the risks of
  bugs slipping through into production, and also manage the Key-Man
  Risk of knowledge not being widely-enough shared.
\item
  If we write Unit Tests, we're addressing the risk of bugs going to
  production, but we're also mitigating against the risk of
  \emph{regression}, and future changes breaking our existing
  functionality.
\item
  If we enter into a contract with a supplier, we are mitigating the
  risk of the supplier vanishing and leaving us exposed. With the
  contract in place, we have legal recourse against this risk.
\end{itemize}

From the above examples, it's clear that \textbf{different tools are
appropriate for managing different types of risks.}

\hypertarget{different-methodologies-are-for-different-risk-profiles}{%
\section{5. Different Methodologies are for Different Risk
Profiles}\label{different-methodologies-are-for-different-risk-profiles}}

In the same way that our tools and techniques are appropriate to dealing
with different risks, the same is true of the methodologies we use on
our projects. We can use a Risk-First approach to examine the different
methodologies, and see which risks they address.

For example:

\begin{itemize}
\tightlist
\item
  \textbf{Agile} methodologies prioritise the risk that requirements
  capture is complicated, error-prone and that requirements change
  easily.
\item
  \textbf{Waterfall} takes the view that development effort is an
  expensive risk, and that we should build plans up-front to avoid
  re-work.
\item
  \textbf{Lean} takes the view that risk lies in incomplete work and
  wasted work, and aims to minimise that.
\end{itemize}

Although many developers have a methodology-of-choice, the argument here
is that there are tradeoffs with all of these choices.

\begin{quotation}

\begin{quote}
``Methodologies are like \emph{bicycles}, rather than \emph{religions}.
Rather than simply \emph{believing}, we can take them apart and see how
they work. ''
\end{quote}

\end{quotation}

\hypertarget{we-can-drive-development-with-a-risk-first-perspective}{%
\section{6. We can Drive Development With a Risk-First
Perspective}\label{we-can-drive-development-with-a-risk-first-perspective}}

We have described a model of risk within software projects, looking
something like this:

\begin{figure}
\centering
\includegraphics{images/generated/executive-summary/pattern_language-400dpi.png}
\caption{Methodologies, Risks, Practices}
\end{figure}

How do we take this further?

One idea explored is the \emph{Risk Landscape}: Although the software
team can't remove risk from their project, they can take actions that
move them to a place in the Risk Landscape where the risks on the
project are more favourable than where they started.

From there, we examine basic risk archetypes you will encounter on the
software project, to build up a Taxonomy of Software Risk, and look at
which specific tools you can use to mitigate each kind of risk.

Then, we look at different software practices, and how they manage
various risks. Beyond this we examine the question: \emph{how can a
Risk-First approach inform the use of this practice?}

For example:

\begin{itemize}
\tightlist
\item
  If we are introducing a \textbf{Sign-Off} in our process, we have to
  balance the risks it \emph{mitigates} (coordination of effort, quality
  control, information sharing) with the risks it \emph{introduces}
  (delays and process bottlenecks).
\item
  If we build in \textbf{Redundancy}, this mitigates the risk of a
  \emph{single point of failure}, but introduces risks around
  \emph{synchronizing data} and \emph{communication} between the
  systems.
\item
  If we introduce \textbf{Process}, this may make it easier to
  \emph{coordinate as a team} and \emph{measure performance} but may
  lead to bureaucracy, focusing on the wrong goals or over-rigid
  interfaces to those processes.
\end{itemize}

Risk-First aims to provide a framework in which we can \emph{analyse
these actions} and weigh up \emph{accepting} versus \emph{mitigating}
risks.

\textbf{Still interested? Then dive into reading the introduction.}

\mainmatter
\part{Introduction}

\hypertarget{a-simple-scenario}{%
\chapter{A Simple Scenario}\label{a-simple-scenario}}

In this chapter, I'm going to introduce some terms for thinking about
risk.

Lets for a moment forget about software completely, and think about
\emph{any endeavour at all} in life. It could be passing a test, mowing
the lawn or going on holiday. Choose something now. I'll discuss from
the point of view of ``cooking a meal for some friends'', but you can
play along with your own example.

\hypertarget{goal-in-mind}{%
\section{Goal In Mind}\label{goal-in-mind}}

Now, in this endeavour, we want to be successful. That is to say, we
have a \textbf{Goal In Mind}: we want our friends to go home satisfied
after a decent meal, and not to feel hungry. As a bonus, we might also
want to spend time talking with them before and during the meal. So, now
to achieve our Goal In Mind we \emph{probably} have to do some tasks.

Since our goal only exists \emph{in our head}, we can say it is part of
our \textbf{Internal Model} of the world. That is, the model we have of
reality. This model extends to \emph{predicting what will happen}.

If we do nothing, our friends will turn up and maybe there's nothing in
the house for them to eat. Or maybe, the thing that you're going to cook
is going to take hours and they'll have to sit around and wait for you
to cook it and they'll leave before it's ready. Maybe you'll be some
ingredients short, or maybe you're not confident of the steps to prepare
the meal and you're worried about messing it all up.

\hypertarget{attendant-risk}{%
\section{Attendant Risk}\label{attendant-risk}}

These \emph{nagging doubts} that are going through your head I'll call
the Attendant Risks: they're the ones that will occur to you as you
start to think about what will happen.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/goal_in_mind-400dpi.png}
\caption{Goal In Mind, with the risks you know about}
\end{figure}

When we go about preparing this wonderful evening, we can choose to deal
with these risks: shop for the ingredients in advance, prepare parts of
the meal, maybe practice the cooking in advance. Or, we can wing it, and
sometimes we'll get lucky.

How much effort we expend on these Attendant Risks depends on how big we
think they are. For example, if you know there's a 24-hour shop, you'll
probably not worry too much about getting the ingredients well in
advance (although, the shop \emph{could still be closed}).

\hypertarget{hidden-risks}{%
\section{Hidden Risks}\label{hidden-risks}}

There are also \textbf{Hidden Risks} that you \emph{don't} know about:
if you're poaching eggs for dinner, perhaps you don't know that fresh
eggs poach best. The difference is, Attendant Risks are risks you are
aware of, but can't be sure of the amount they will impact you. Hidden
Risks are ones you are unaware of.

\href{https://en.wikipedia.org/wiki/There_are_known_knowns}{Donald
Rumsfeld} famously called these ``Unknown Unknowns''.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/hidden_risks-400dpi.png}
\caption{Goal In Mind, the risks you know about and the ones you don't}
\end{figure}

Different people evaluate risks differently, and they'll also
\emph{know} about different risks. What is an Attendant Risk for one
person is a Hidden Risk for another.

Which risks we know about depends on our \textbf{knowledge} and
\textbf{experience}, then. And that varies from person to person (or
team to team).

\hypertarget{meeting-reality}{%
\section{Meeting Reality}\label{meeting-reality}}

As the dinner party gets closer, we make our preparations, and the
inadequacies of the Internal Model become apparent. We learn what we
didn't know and the Hidden Risks reveal themselves. Other things we were
worried about don't materialise. Things we thought would be minor risks
turn out to be greater.

Our model is forced to Meet Reality, and the model changes, forcing us
to deal with these risks, as shown in this diagram. Whenever we try to
\emph{do something} about a risk, it is called Taking Action. Taking
Action \emph{changes} reality, and with it your Internal Model of the
risks you're facing. That's because it's only by interacting with the
world that we add knowledge to our Internal Model about what works and
what doesn't. Even something as passive as \emph{checking the shop
opening times} is an action, and it improves on our Internal Model of
the world.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/model_vs_reality-400dpi.png}
\caption{How Taking Action affects Reality, and also changes your
Internal Model}
\end{figure}

If we had a good Internal Model, and took the right actions, we should
see positive outcomes. If we failed to manage the risks, or took
inappropriate actions, we'll probably see negative outcomes.

\hypertarget{on-to-software}{%
\section{On To Software}\label{on-to-software}}

Here, we've introduced some new terms that we're going to use a lot:
Meet Reality, Attendant Risk, Hidden Risk, Internal Model, Taking Action
and Goal In Mind. And, we've applied them in a simple scenario.

But Risk-First is about understanding risk in software development, so
let's examine the scenario of a new software project, and expand on the
simple model being outlined above: instead of a single person, we are
likely to have a team, and our model will not just exist in our heads,
but in the code we write.

On to Development Process\ldots{}

\hypertarget{development-process}{%
\chapter{Development Process}\label{development-process}}

In the previous chapter we introduced some terms for talking about risk
(such as Attendant Risk, Hidden Risk and Internal Model) via a simple
scenario.

Now, let's look at the everyday process of developing \emph{a new
feature} on a software project, and see how our risk model informs it.

\hypertarget{an-example-process}{%
\section{An Example Process}\label{an-example-process}}

Let's ignore for now the specifics of what methodology is being used -
we'll come to that later. Let's say your team have settled for a process
something like the following:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  \textbf{Specification}: A new feature is requested somehow, and a
  business analyst works to specify it.
\item
  \textbf{Code And Unit Test}: A developer writes some code, and some
  unit tests.
\item
  \textbf{Integration}: They integrate their code into the code base.
\item
  \textbf{UAT}: They put the code into a User Acceptance Test (UAT)
  environment, and user(s) test it.
\item
  \ldots{} All being well, the code is \textbf{Released to Production}.
\end{enumerate}

\begin{figure}
\centering
\includegraphics{images/generated/introduction/development_process_1-400dpi.png}
\caption{A Simple Development Process}
\end{figure}

Now, the \emph{methodology} being used might be Waterfall, it might be
Agile. We're not going to commit to specifics at this stage. Also we
don't need to consider whether this is particularly a \emph{good}
process: you could add code review, a pilot phase, integration testing,
whatever. It's probably not perfect, but let's just assume that \emph{it
works for this project} and everyone is reasonably happy with it.

We're just doing some analysis of \emph{what process gives us}.

\hypertarget{minimizing-risks---overview}{%
\section{Minimizing Risks -
Overview}\label{minimizing-risks---overview}}

I am going to argue that this entire process is \emph{informed by
software risk}:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  We have \emph{a business analyst} who talks to users and fleshes out
  the details of the feature properly. This is to minimize the risk of
  \textbf{building the wrong thing}.
\item
  We \emph{write unit tests} to minimize the risk that our code
  \textbf{isn't doing what we expected, and that it matches the
  specifications}.
\item
  We \emph{integrate our code} to minimize the risk that it's
  \textbf{inconsistent with the other, existing code on the project}.
\item
  We have \emph{acceptance testing} and quality gates generally to
  \textbf{minimize the risk of breaking production}, somehow.
\end{enumerate}

We could skip all those steps above and just do this:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  Developer gets wind of new idea from user, logs onto production and
  changes some code directly.
\end{enumerate}

\begin{figure}
\centering
\includegraphics{images/generated/introduction/development_process_2-400dpi.png}
\caption{A Dangerous Development Process}
\end{figure}

We can all see this would be a disaster, but why?

Two reasons:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  You're Meeting Reality all-in-one-go: All of these risks materialize
  at the same time, and you have to deal with them all at once.
\item
  Because of this, at the point you put code into the hands of your
  users, your Internal Model is at its least-developed. All the Hidden
  Risks now need to be dealt with at the same time, in production.
\end{enumerate}

\hypertarget{applying-the-model}{%
\section{Applying the Model}\label{applying-the-model}}

Let's look at how our process should act to prevent these risks
materializing by considering an unhappy path, one where at the outset,
we have lots of Hidden Risks. Let's say a particularly vocal user rings
up someone in the office and asks for new \textbf{Feature X} to be added
to the software. It's logged as a new feature request, but:

\begin{itemize}
\tightlist
\item
  Unfortunately, this feature once programmed will break an existing
  \textbf{Feature Y}.
\item
  Implementing the feature will use some api in a library, which
  contains bugs and have to be coded around.
\item
  It's going to get misunderstood by the developer too, who is new on
  the project and doesn't understand how the software is used.
\item
  Actually, this functionality is mainly served by \textbf{Feature
  Z}\ldots{}
\item
  which is already there but hard to find.
\end{itemize}

The diagram below shows how this plays out.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/development_process_3-400dpi.png}
\caption{Development Process - Exposing Hidden Risks}
\end{figure}

This is a slightly contrived example, as you'll see. But let's follow
our feature through the process and see how it meets reality slowly, and
the Hidden Risks are discovered:

\hypertarget{specification}{%
\subsection{Specification}\label{specification}}

The first stage of the journey for the feature is that it meets the
Business Analyst (BA). The \emph{purpose} of the BA is to examine new
goals for the project and try to integrate them with \emph{reality as
they understands it}. A good BA might take a feature request and vet it
against his Internal Model, saying something like:

\begin{itemize}
\tightlist
\item
  ``This feature doesn't belong on the User screen, it belongs on the
  New Account screen''
\item
  ``90\% of this functionality is already present in the Document Merge
  Process''
\item
  ``We need a control on the form that allows the user to select between
  Internal and External projects''
\end{itemize}

In the process of doing this, the BA is turning the simple feature
request \emph{idea} into a more consistent, well-explained
\emph{specification} or \emph{requirement} which the developer can pick
up. But why is this a useful step in our simple methodology? From the
perspective of our Internal Model, we can say that the BA is responsible
for:

\begin{itemize}
\tightlist
\item
  Trying to surface Hidden Risks
\item
  Trying to evaluate Attendant Risks and make them clear to everyone on
  the project.
\end{itemize}

\begin{figure}
\centering
\includegraphics{images/generated/introduction/development_process_ba-400dpi.png}
\caption{BA Specification: exposing Hidden Risks as soon as possible}
\end{figure}

In surfacing these risks, there is another outcome: while
\textbf{Feature X} might be flawed as originally presented, the BA can
``evolve'' it into a specification, and tie it down sufficiently to
reduce the risks. The BA does all this by simply \emph{thinking about
it}, \emph{talking to people} and \emph{writing stuff down}.

This process of evolving the feature request into a requirement is the
BA's job. From our Risk-First perspective, it is \emph{taking an idea
and making it Meet Reality}. Not the \emph{full reality} of production
(yet), but something more limited.

\hypertarget{code-and-unit-test}{%
\subsection{Code And Unit Test}\label{code-and-unit-test}}

The next stage for our feature, \textbf{Feature X} is that it gets coded
and some tests get written. Let's look at how our Goal In Mind meets a
new reality: this time it's the reality of a pre-existing codebase,
which has it's own internal logic.

As the developer begins coding the feature in the software, she will
start with an Internal Model of the software, and how the code fits into
it. But, in the process of implementing it, she is likely to learn about
the codebase, and her Internal Model will develop.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/development_process_code-400dpi.png}
\caption{Coding Process: exposing more hidden risks as you code}
\end{figure}

At this point, let's stop and discuss the visual grammar of the
Risk-First Diagrams we've been looking at. A Risk-First diagram shows
what you expect to happen when you Take Action. The action itself is
represented by the shaded, sign-post-shaped box in the middle. On the
left, we have the current state of the world, on the right is the
anticipated state \emph{after} taking the action.

The round-cornered rectangles represent our Internal Model, and these
contain our view of Risk, whether the risks we face right now, or the
Attendant Risks expected after taking the action. In the diagram above,
taking the action of ``coding and unit testing'' is expected to mitigate
the risks of ``Developer Misimplementation'' and ``Duplicating
Functionality''.

Beneath the internal models, we are also showing real-world tangible
artifacts. That is, the physical change we would expect to see as a
result of taking action. In this diagram, the action will result in
``New Code'' being added to the project, needed for the next steps of
the development process.

\hypertarget{integration}{%
\subsection{Integration}\label{integration}}

Integration is where we run \emph{all} the tests on the project, and
compile \emph{all} the code in a clean environment, collecting together
the work from the whole development team.

So, this stage is about meeting a new reality: the clean build.

At this stage, we might discover the Hidden Risk that we'd break
\textbf{Feature Y}

\begin{figure}
\centering
\includegraphics{images/generated/introduction/development_process_integration-400dpi.png}
\caption{Integration testing exposes Hidden Risks before you get to
production}
\end{figure}

\hypertarget{user-acceptance-test}{%
\subsection{User Acceptance Test}\label{user-acceptance-test}}

Next, User Acceptance Testing (UAT) is where our new feature meets
another reality: \emph{actual users}. I think you can see how the
process works by now. We're just flushing out yet more Hidden Risks.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/development_process_uat-400dpi.png}
\caption{UAT - putting tame users in front of your software is better
than real ones, where the risk is higher}
\end{figure}

\begin{itemize}
\tightlist
\item
  Taking Action is the \emph{only} way to create change in the world.
\item
  It's also the only way we can \emph{learn} about the world, adding to
  our Internal Model.
\item
  In this case, we discover a Hidden Risk: the user's difficulty in
  finding the feature. (The cloud obscuring the risk shows that it is
  hidden).
\item
  In return, we can \emph{expect} the process of performing the UAT to
  delay our release (this is an attendant schedule risk).
\end{itemize}

\hypertarget{observations}{%
\section{Observations}\label{observations}}

\textbf{First}, the people setting up the development process
\emph{didn't know} about these \emph{exact} risks, but they knew the
\emph{shape that the risks take}. The process builds ``nets'' for the
different kinds of Hidden Risks without knowing exactly what they are.

\textbf{Second}, are these really risks, or are they \emph{problems we
just didn't know about}? I am using the terms interchangeably, to a
certain extent. Even when you know you have a problem, it's still a risk
to your deadline until it's solved. So, when does a risk become a
problem? Is a problem still just a schedule-risk, or cost-risk? We'll
come back to this question presently.

\textbf{Third}, the real take-away from this is that all these risks
exist because we don't know 100\% how reality is. We don't (and can't)
have a perfect view of the universe and how it'll develop. Reality is
reality, \emph{the risks just exist in our head}.

\textbf{Fourth}, hopefully you can see from the above that really
\emph{all this work is risk management}, and \emph{all work is testing
ideas against reality}.

In the next chapter, we're going to look at the concept of Meeting
Reality in a bit more depth.

\hypertarget{meeting-reality-1}{%
\chapter{Meeting Reality}\label{meeting-reality-1}}

In this chapter, we will look at how exposing your Internal Model to
reality is in itself a good risk management technique.

\hypertarget{revisiting-the-model}{%
\section{Revisiting the Model}\label{revisiting-the-model}}

In A Simple Scenario, we looked at a basic model for how
\textbf{Reality} and our Internal Model interacted with each other: we
take action based on out Internal Model, hoping to \textbf{change
Reality} with some positive outcome.

And, in Development Process we looked at how we can meet with reality in
\emph{different forms}: Analysis, Testing, Integration and so on, and
saw how the model could work in each stage of a project.

It should be no surprise to see that there is a \emph{recursive} nature
about this: The actions we take each day have consequences: they expose
new hidden risks**, which inform our Internal Model, and at the same
time, they change reality in some way. As a result, we then have to take
\emph{new actions} to deal with these new risks.

So, let's see how this kind of recursion looks on our model.

\includegraphics{images/generated/introduction/model_vs_reality_2-400dpi.png}
.

\hypertarget{navigating-the-risk-landscape}{%
\section{``Navigating the Risk
Landscape''}\label{navigating-the-risk-landscape}}

The above diagram shows \emph{just one possible action}, in reality,
you'll have choices. We often have multiple ways of achieving a Goal In
Mind.

What's the best way?

I would argue that the best way is the one which mitigates the most
existing risk while accruing the least attendant risk to get it done.

Ideally, when you take an action, you are trading off a big risk for a
smaller one. Take Unit Testing for example. Clearly, writing Unit Tests
adds to the amount of development work, so on it's own, it adds Schedule
Risk. However, if you write \emph{just enough} of the right Unit Tests,
you should be short-cutting the time spent finding issues in the User
Acceptance Testing (UAT) stage, so you're hopefully trading off a larger
Schedule Risk from UAT and adding a smaller Schedule Risk to
Development. There are other benefits of Unit Testing too: once written,
a suite of unit tests is almost cost-free to run repeatedly, whereas
repeating a UAT is costly as it involves people's time.

You can think of Taking Action as moving your project on a ``Risk
Landscape'': ideally, when you take an action, you move to some place
with worse risk to somewhere more favourable.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/risk_landscape_1-400dpi.png}
\caption{Navigating The Risk Landscape}
\end{figure}

Sometimes, you can end up somewhere \emph{worse}: the actions you take
to manage a risk will leave you with worse Attendant Risks afterwards.
Almost certainly, this will have been a Hidden Risk when you embarked on
the action, otherwise you'd not have chosen it.

\hypertarget{an-example-automation}{%
\subsection{An Example: Automation}\label{an-example-automation}}

For example, \emph{automating processes} is very tempting: it
\emph{should} save time, and reduce the amount of boring, repetitive
work on a project. But sometimes, it turns into an industry in itself,
and consumes more effort than it's worth.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/risk_landscape_2_automating-400dpi.png}
\caption{Hidden Risks of Automation}
\end{figure}

\hypertarget{another-example-mongodb}{%
\subsection{Another Example: MongoDB}\label{another-example-mongodb}}

On a recent project in a Bank, we had a requirement to store a modest
amount of data and we needed to be able to retrieve it fast. The
developer chose to use \href{https://www.mongodb.com}{MongoDB} for this.
At the time, others pointed out that other teams in the bank had had
lots of difficulty deploying MongoDB internally, due to licensing issues
and other factors internal to the bank.

Other options were available, but the developer chose MongoDB because of
their \emph{existing familiarity} with it: therefore, they felt that the
Hidden Risks of MongoDB were \emph{lower} than the other options, and
disregarded the others' opinions.

This turned out to be a mistake: The internal bureacracy eventually
proved too great, and MongoDB had to be abandoned after much investment
of time.

This is not a criticism of MongoDB: it's simply a demonstration that
sometimes, the cure is worse than the disease. Successful projects are
\emph{always} trying to \emph{reduce} Attendant Risks.

\hypertarget{pay-off}{%
\section{Pay-Off}\label{pay-off}}

We can't know in advance how well any action we take will work out.
Therefore, Taking Action is a lot like placing a bet.

\textbf{Pay Off} then is our judgement about whether we expect an action
to be worthwhile: Are the risks we escape \emph{worth} the attendant
risks we will encounter? We should be able to \emph{weigh these separate
risks in our hands} and figure out whether the (Glossary\#pay-off) makes
a given Action worthwhile.

The fruits of this gambling are revealed when we meet reality, and we
can see whether our bets were worthwhile.

\hypertarget{the-cost-of-meeting-reality}{%
\section{The Cost Of Meeting
Reality}\label{the-cost-of-meeting-reality}}

Meeting reality \emph{in full} is costly. For example, going to
production can look like this:

\begin{itemize}
\tightlist
\item
  Releasing software
\item
  Training users
\item
  Getting users to use your system
\item
  Gathering feedback
\end{itemize}

All of these steps take a lot of effort and time. But you don't have to
meet the whole of reality in one go. But we can meet it in a limited way
which is less expensive.

In all, to de-risk, you should try and meet reality:

\begin{itemize}
\tightlist
\item
  \textbf{Sooner}, so you have time to mitigate the hidden risks it
  uncovers
\item
  \textbf{More Frequently}: so the hidden risks don't hit you all at
  once
\item
  \textbf{In Smaller Chunks}: so you're not over-burdened by hidden
  risks all in one go.
\item
  \textbf{With Feedback}: if you don't collect feedback from the
  experience of meeting reality, hidden risks \emph{stay hidden}.
\end{itemize}

In Development Process, we performed a UAT in order to Meet Reality more
cheaply and sooner. The \emph{cost} of this is that we delayed the
release to do it, adding risk to the schedule.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/meeting_reality_testing-400dpi.png}
\caption{Testing flushes out Hidden Risk, but increases Schedule Risk}
\end{figure}

\hypertarget{practice-1-yagni}{%
\section{Practice 1: YAGNI}\label{practice-1-yagni}}

As a flavour of what's to come, let's look at YAGNI, an acronym for You
Aren't Gonna Need It:

\begin{quote}
YAGNI originally is an acronym that stands for ``You Aren't Gonna Need
It''. It is a mantra from Extreme Programming that's often used
generally in agile software teams. It's a statement that some capability
we presume our software needs in the future should not be built now
because ``you aren't gonna need it''. -
\href{https://www.martinfowler.com/bliki/Yagni.html}{YAGNI, \emph{Martin
Fowler}}
\end{quote}

The idea makes sense: if you take on extra work that you don't need,
\emph{of course} you'll be accreting Attendant Risks.

But, there is always the opposite opinion:
\href{http://wiki.c2.com/?YouAreGonnaNeedIt}{You \emph{Are} Gonna Need
It}. As a simple example, we often add log statements in our code as we
write it (so we can trace what happened when things go wrong), though
strictly following YAGNI strictly says we shouldn't.

\hypertarget{which-is-right}{%
\subsection{Which is right?}\label{which-is-right}}

Now, we can say: do the work \emph{if there is a worthwhile Pay-Off}.

\begin{itemize}
\tightlist
\item
  Logging statements are \emph{good}, because otherwise, you're
  increasing the risk that in production, no one will be able to
  understand \emph{how the software went wrong}.
\item
  However, adding them takes time, which might introduce Schedule Risk.
\end{itemize}

So, it's a trade-off: continue adding logging statements so long as you
feel that overall, the activity pays-off reducing overall risk.

\hypertarget{practice-2-do-the-simplest-thing-that-could-possibly-work}{%
\section{Practice 2: Do The Simplest Thing That Could Possibly
Work}\label{practice-2-do-the-simplest-thing-that-could-possibly-work}}

Another mantra from Kent Beck (originator of the
\href{https://en.wikipedia.org/wiki/Extreme_programming}{Extreme
Programming} methodology), is ``Do The Simplest Thing That Could
Possibly Work'', which is closely related to YAGNI and is about looking
for solutions which are simple. Our risk-centric view of this strategy
would be:

\begin{itemize}
\tightlist
\item
  Every action you take on a project has it's own Attendant Risks.
\item
  The bigger or more complex the action, the more Attendant Risk it'll
  have.
\item
  The reason you're taking action \emph{at all} is because you're trying
  to reduce risk elsewhere on the project
\item
  Therefore, the biggest Pay-Off is likely to be the one with the least
  Attendant Risk.
\item
  So, usually this is going to be the simplest thing.
\end{itemize}

So, ``Do The Simplest Thing That Could Possibly Work'' is really a
helpful guideline for Navigating the Risk Landscape, but this analysis
shows clearly where it's left wanting:

\begin{itemize}
\tightlist
\item
  \emph{Don't} do the simplest thing if there are other things with a
  better Pay-Off available.
\end{itemize}

\hypertarget{summary}{%
\section{Summary}\label{summary}}

So, here we've looked at Meeting Reality, which basically boils down to
taking actions to manage risk and seeing how it turns out:

\begin{itemize}
\tightlist
\item
  Each Action you take is a step on the Risk Landscape
\item
  Each Action exposes new Hidden Risks, changing your Internal Model.
\item
  Ideally, each action should reduce the overall Attendant Risk on the
  project (that is, puts it in a better place on the Risk Landscape
\end{itemize}

Could it be that \emph{everything} you do on a software project is risk
management? This is an idea explored in the next chapter.

\hypertarget{all-risk-management}{%
\chapter{All Risk Management}\label{all-risk-management}}

In this chapter, I am going to propose the idea that everything you do
on a software project is Risk Management.

In the last chapter, we observed that all the activities in a simple
methodology had a part to play in exposing different risks. They worked
to manage risk prior to them creating bigger problems in production.

Here, we'll look at one of the tools in the Project Manager's tool-box,
the \href{http://pmtips.net/blog-new/raid-logs-introduction}{RAID Log},
and observe how risk-centric it is.

\hypertarget{raid-log}{%
\section{RAID Log}\label{raid-log}}

Many project managers will be familiar with the RAID Log. It's simply
four columns on a spreadsheet: \textbf{Risks}, \textbf{Actions},
\textbf{Issues} and \textbf{Decisions}.

Let's try and put the following Risk into the RAID Log:

\begin{quotation}

\begin{quote}
``Debbie needs to visit the client to get them to choose the logo to use
on the product, otherwise we can't size the screen areas exactly.''
\end{quote}

\end{quotation}

\begin{itemize}
\tightlist
\item
  So, is this an \textbf{action}? Certainly. There's definitely
  something for Debbie to do here.
\item
  Is it an \textbf{issue}? Yes, because it's holding up the screen-areas
  sizing thing.
\item
  Is it a \textbf{decision}? Well, clearly, it's a decision for someone.
\item
  Is it a \textbf{risk}? Probably: Debbie might go to the client and
  they \emph{still} don't make a decision. What then?
\end{itemize}

\hypertarget{lets-go-again}{%
\section{Let's Go Again}\label{lets-go-again}}

This is a completely made-up example, deliberately chosen to be hard to
categorise. Normally, items are more one thing than another. But often,
you'll have to make a choice between two categories, if not all four.

This \emph{hints} at the fact that at some level it's all about risk:

\hypertarget{every-action-attempts-to-mitigate-risk}{%
\section{Every Action Attempts to Mitigate
Risk}\label{every-action-attempts-to-mitigate-risk}}

The reason you are \emph{taking} an action is to mitigate a risk. For
example:

\begin{itemize}
\tightlist
\item
  If you're coding up new features in the software, this is mitigating
  Feature Risk (which we'll explore in more detail later).
\item
  If you're getting a business sign-off for something, this is
  mitigating the risk of everone not agreeing on a course of action (a
  Coordination Risk).
\item
  If you're writing a specification, that's mitigating the type of
  ``Developer Misimplementation Risk'' we saw in the last chapter.
\end{itemize}

\hypertarget{every-action-has-attendant-risk.}{%
\section{Every Action Has Attendant
Risk.}\label{every-action-has-attendant-risk.}}

\begin{itemize}
\tightlist
\item
  How do you know if the action will get completed?
\item
  Will it overrun, or be on time?
\item
  Will it lead to yet more actions?
\item
  What Hidden Risk will it uncover?
\end{itemize}

Consider \emph{coding a feature} (as we did in the earlier Development
Process chapter). We saw here how the whole process of coding was an
exercise in learning what we didn't know about the world, uncovering
problems and improving our Internal Model. That is, flushing out the
Attendant Risk of the Goal In Mind.

And, as we saw in the Introduction, even something \emph{mundane} like
the Dinner Party had risks.

\hypertarget{an-issue-is-just-a-type-of-risk}{%
\section{An Issue is Just A Type of
Risk}\label{an-issue-is-just-a-type-of-risk}}

\begin{itemize}
\tightlist
\item
  Because issues need to be fixed\ldots{}
\item
  And fixing an issue is an action\ldots{}
\item
  Which, as we just saw also carry risk.
\end{itemize}

One retort to this might be to say: ``An issue is a problem I have now,
whereas a risk is a problem that \emph{might} occur.'' I am going to try
and break that mind-set in the coming pages, but I'll just start with
this:

\begin{itemize}
\tightlist
\item
  Do you know \emph{exactly} how much damage this issue will do?
\item
  Can you be sure that the issue might not somehow go away?
\end{itemize}

\emph{Issues} then, just seem more ``definite'' and ``now'' than
\emph{risks}, right? This classification is arbitrary: they're all just
part of the same spectrum, they all have inherent uncertainty, so there
should be no need to agonise over which column to put them in.

\hypertarget{goals-are-risks-too}{%
\section{Goals Are Risks Too}\label{goals-are-risks-too}}

In the previous chapters, we've introduced something of a ``diagram
language'' of risk. Let's review it:

\begin{figure}
\centering
\includegraphics{images/generated/introduction/all_risk_management_language-400dpi.png}
\caption{Risk-First Diagram Language}
\end{figure}

Goals live inside our Internal Model, just like Risks. It turns out,
that functionally, Goals and Risks are equivalent. For example, The Goal
of ``Implementing Feature X'' is equivalent to mitigating ``Risk of
Feature X not being present''.

Let's try and back up that assertion with a few more examples:

\begin{longtable}[]{@{}ll@{}}
\toprule
\begin{minipage}[b]{0.32\columnwidth}\raggedright
Goal\strut
\end{minipage} & \begin{minipage}[b]{0.62\columnwidth}\raggedright
Restated As A Risk\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.32\columnwidth}\raggedright
Build a Wall\strut
\end{minipage} & \begin{minipage}[t]{0.62\columnwidth}\raggedright
Mitigate the risk of something getting in / out\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.32\columnwidth}\raggedright
Land a man on the moon\strut
\end{minipage} & \begin{minipage}[t]{0.62\columnwidth}\raggedright
Mitigate the risk of looking technically inferior during the cold
war\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.32\columnwidth}\raggedright
Move House\strut
\end{minipage} & \begin{minipage}[t]{0.62\columnwidth}\raggedright
Mitigate the risks/problems of where you currently live\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

There is a certain ``interplay'' between the concepts of risks, actions
and goals. After all, on the Risk Landscape they correspond to a
starting point, a movement, and a destination. From a redundancy
perspective, any one of these can be determined by knowing the other
two.

Psychologically, humans are very goal-driven: they like to know where
they're going, and are good at organising around a goal. However, by
focusing on goals (``solutionizing'') it's easy to ignore alternatives.
By focusing on ``Risk-First'', we don't ignore the reasons we're doing
something.

\hypertarget{every-decision-is-about-pay-off.}{%
\section{Every Decision is About
Pay-Off.}\label{every-decision-is-about-pay-off.}}

\begin{itemize}
\tightlist
\item
  By the very nature of having to make a decision, there's the risk
  you'll decide wrongly.
\item
  And, making a decision takes time, which could add risk to your
  schedule.
\item
  And what's the risk if the decision doesn't get made?
\end{itemize}

Sometimes, there will be multiple moves available on the Risk Landscape
and you have to choose. Let's take a hypothetical example: You're on a
project and you're faced with the decision - release now or do more
testing?

Obviously, in the ideal world, we want to get to the place on the Risk
Landscape where we have a tested, bug-free system in production. But
we're not there yet, and we have funding pressure to get the software
into the hands of some paying customers. The table below shows an
example:

\begin{longtable}[]{@{}llll@{}}
\toprule
\begin{minipage}[b]{0.19\columnwidth}\raggedright
Risk Managed\strut
\end{minipage} & \begin{minipage}[b]{0.18\columnwidth}\raggedright
Action\strut
\end{minipage} & \begin{minipage}[b]{0.35\columnwidth}\raggedright
Attendant Risk\strut
\end{minipage} & \begin{minipage}[b]{0.16\columnwidth}\raggedright
Pay-Off\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.19\columnwidth}\raggedright
Funding Risk\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Go Live\strut
\end{minipage} & \begin{minipage}[t]{0.35\columnwidth}\raggedright
Reputational Risk, Operational Risk\strut
\end{minipage} & \begin{minipage}[t]{0.16\columnwidth}\raggedright
MEDIUM\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.19\columnwidth}\raggedright
Implementation Risk\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
User Acceptance Test\strut
\end{minipage} & \begin{minipage}[t]{0.35\columnwidth}\raggedright
Worse Funding Risk, Operational Risk\strut
\end{minipage} & \begin{minipage}[t]{0.16\columnwidth}\raggedright
LOW\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

This is (a simplification of) the dilemma on lots of software projects -
\emph{test further}, to reduce the risk of users discovering bugs
(Implementation Risk) which would cause us reputational damage, or
\emph{get the release done} and reduce our Funding Risk by getting
paying clients sooner.

In the above table, it \emph{appears} to be better to do the ``Go Live''
action, as there is a greater Pay Off. The problem is, actions are not
\emph{commutative}, i.e.~the order you do them in counts.

\begin{figure}
\centering
\includegraphics{images/generated/introduction/risk_landscape_3_moves-400dpi.png}
\caption{UAT or Go Live: Where will you end up?}
\end{figure}

The above diagram shows our decision as \emph{moves on the Risk
Landscape}. Whether you ``Go Live'' first, or ``UAT'' first makes a
difference to where you will end up. Is there a further action you can
take to get you from the ``Dead End'' to the ``Goal''? Perhaps.

\hypertarget{failure}{%
\subsection{Failure}\label{failure}}

So, when we talk about a project ``failing'', what do we mean?

Usually, we mean we've failed to achieve a goal, and since \emph{goals
are risks}, it is simply the scenario where we are overwhelmed by
Attendant Risks: there is \emph{no} action to take that has a
good-enough Pay Off to get us out of our hole.

\hypertarget{what-to-do}{%
\section{What To Do?}\label{what-to-do}}

It makes it much easier to tackle the RAID log if there's only one list.
But you still have to choose a \emph{strategy}: Do you tackle the
\emph{most important} risk on the list, or the \emph{most urgent}, or
take the action with the biggest Pay Off and deal with it?

In the next chapter, Evaluating Risk we'll look at some approaches to
choosing what to do.

\hypertarget{evaluating-risk}{%
\chapter{Evaluating Risk}\label{evaluating-risk}}

Here, I am going to re-cap on some pre-existing risk management theory
in order to set the scene for the next chapter which heads back to
looking at risk on software projects.

\hypertarget{risk-registers}{%
\section{Risk Registers}\label{risk-registers}}

Most developers are familiar with recording issues in an issue tracker.
For all of the same reasons, it's good practice to record the risks you
face running a project or an operation in a
\href{https://en.wikipedia.org/wiki/Risk_register}{Risk Register}.
Typically, this will include for each risk:

\begin{itemize}
\tightlist
\item
  The \textbf{name} of the risk, or other identifier.
\item
  A \textbf{categories} to which the risk belongs (this is the focus of
  the Risk Landscape chapter in Part 2).
\item
  A \textbf{brief description} or name of the risk to make the risk easy
  to discuss
\item
  Some estimate for the \textbf{Impact}, \textbf{Probability} or
  \textbf{Risk Score} of the risk.
\item
  Proposed actions and a log of the progress made to manage the risk.
\end{itemize}

Some points about this description:

\hypertarget{a-continuum-of-formality}{%
\subsection{A Continuum of Formality}\label{a-continuum-of-formality}}

Remember back to the Dinner Party example at the start: the Risk
Register happened \emph{entirely in your head}. There is a continuum all
the way from ``in your head'' through ``using a spreadsheet'' to
dedicated Risk Management software.

It's also going to be useful \emph{in conversation}, and this is where
the value of the Risk-First approach is: providing a vocabulary to
\emph{talk about risks} with your team.

\hypertarget{probability-and-impact}{%
\subsection{Probability And Impact}\label{probability-and-impact}}

\textbf{Probability} is how likely something is to happen, whilst
\textbf{Impact} is the cost (usually financial) when it does happen.

In a financial context (or a gambling one), we can consider the overall
\textbf{Risk Score} as being the sum of the \textbf{Impact} of each
outcome multiplied by it's \textbf{Probability}. For example, if you buy
a 1-Euro ticket in a raffle, there are two outcomes: win or lose. The
impact of \emph{winning} would be (say) a hundred Euros, but the
\textbf{probability} might be 1 in 200. The impact of \emph{losing}
would be the loss of 1 Euro, with

\begin{longtable}[]{@{}llll@{}}
\toprule
Outcome & Impact & Probabilty & Risk Score\tabularnewline
\midrule
\endhead
Win & + 99 EUR & 1 in 200 & .5 EUR\tabularnewline
Lose & - 1 EUR & 199 in 200 & -.99 EUR\tabularnewline
\bottomrule
\end{longtable}

Risk Management in the finance industry \emph{starts} here, and gets
more complex, but often (especially on a software project), it's better
to skip all this, and just figure out a Risk Score. This is because if
you think about ``impact'', it implies a definite, discrete event
occurring, or not occurring, and asks you then to consider the
probability of that occurring.

Risk-First takes a view that risks are a continuous quantity, more like
\emph{money} or \emph{water}: by taking an action before delivering a
project you might add a degree of Schedule Risk, but decrease the
Operational Risk later on by a greater amount.

\hypertarget{risk-matrix}{%
\section{Risk Matrix}\label{risk-matrix}}

A risk matrix presents a graphical view on where risks exist. Here is an
example, showing the risks from the dinner party in the A Simple
Scenario chapter:

\begin{figure}
\centering
\includegraphics{images/generated/introduction/risk_matrix-400dpi.png}
\caption{Risk Register of Dinner Party Risks}
\end{figure}

This type of graphic is \emph{helpful} in deciding what to do next,
although alternatively, you can graph the overall \textbf{Risk Score}
against the Pay-Off. Easily mitigated risk (on the right), and worse
risks (at the top) can therefore be dealt with first (hopefully).

\begin{figure}
\centering
\includegraphics{images/generated/introduction/risk_matrix_2-400dpi.png}
\caption{Risk Register of Dinner Party Risks, Considering Pay-Off}
\end{figure}

\hypertarget{unknown-unknowns}{%
\section{Unknown Unknowns}\label{unknown-unknowns}}

One of the criticisms of the Risk Register approach is that of mistaking
the map for the territory. That is, mistakenly believing that what's on
the Risk Register \emph{is all there is}.

In the preceding discussions, I have been careful to point out the
existence of Hidden Risks for that very reason. Or, to put another way:

\begin{quote}
What we don't know is what usually gets us killed - Petyr Baelish,
\emph{Game of Thrones}
\end{quote}

Donald Rumsfeld's famous Known Knowns is also a helpful
conceptualisation:

\begin{itemize}
\tightlist
\item
  \textbf{A \emph{known} unknown} is an Attendant Risk. i.e.~something
  you are aware of, but where the precise degree of threat can't be
  established.
\item
  \textbf{An \emph{unknown} unknown} is a Hidden Risk. i.e a risk you
  haven't even thought to exist yet.
\end{itemize}

\hypertarget{risk-and-uncertainty}{%
\section{Risk And Uncertainty}\label{risk-and-uncertainty}}

Arguably, this site uses the term `Risk' wrongly: most literature
suggests
\href{https://keydifferences.com/difference-between-risk-and-uncertainty.html}{risk
can be measured} whereas uncertainty represents things that cannot.

I am using \textbf{risk} everywhere because later we will talk about
specific risks (e.g.~Boundary Risk or Complexity Risk), and it doesn't
feel grammatically correct to talk about those as
\textbf{uncertainties}, especially given the pre-existing usage in
Banking of terms like
\href{https://en.wikipedia.org/wiki/Operational_risk}{Operational Risk}
or
\href{https://www.investopedia.com/terms/r/reputational-risk.asp}{Reputational
risk} which are also not really a-priori measurable.

\hypertarget{the-opposite-of-risk-management}{%
\section{The Opposite Of Risk
Management}\label{the-opposite-of-risk-management}}

Let's look at the classic description of Risk Management:

\begin{quote}
Risk Management is the process of thinking out corrective actions before
a problem occurs, while it's still an abstraction. The opposite of risk
management is crisis management, trying to figure out what to do about
the problem after it happens. - \href{http://amzn.eu/d/i0IDFA2}{Waltzing
With Bears, \emph{Tom De Marco \& Tim Lister}}
\end{quote}

This is not how Risk-First sees it:

First, we have the notion that Risks are discrete events, again. Some
risks \emph{are} (like gambling on a horse race), but most
\emph{aren't}. In the Dinner Party, for example, bad preparation is
going to mean a \emph{worse} time for everyone, but how good a time
you're having is a spectrum, it doesn't divide neatly into just ``good''
or ``bad''.

Second, the opposite of ``Risk Management'' (or trying to minimise the
``Down-side'') is either ``Upside Risk Management'', (trying to maximise
the good things happening), or it's trying to make as many bad things
happen as possible.

Third, Crisis Management is \emph{still just Risk Management}: the
crisis (Earthquake, whatever) has \emph{happened}. You can't manage it
because it's in the past. All you can do is Risk Manage the future
(minimize further casualties and human suffering, for example).

Yes, it's fine to say ``we're in crisis'', but to assume there is a
different strategy for dealing with it is a mistake: this is the
\href{https://en.wikipedia.org/wiki/Escalation_of_commitment}{Fallacy of
Sunk Costs}.

\hypertarget{invariances-1-panic-invariance}{%
\section{Invariances \#1: Panic
Invariance}\label{invariances-1-panic-invariance}}

You would expect then, that any methods for managing software delivery
should be \emph{invariant} to the level of crisis in the project. If,
for example, a project proceeds using
\href{https://en.wikipedia.org/wiki/Scrum_(software_development)}{Scrum}
for eight months, and then the deadline looms and everyone agrees to
throw Scrum out of the window and start hacking, then \emph{this implies
there is a problem with Scrum}, and that it is not \emph{Panic
Invariant}. In fact, many tools like Scrum don't consider this:

\begin{itemize}
\tightlist
\item
  If there is a production outage during the working week, we don't wait
  for the next Scrum Sprint to fix it.
\item
  Although a 40-hour work-week \emph{is a great idea}, this goes out of
  the window if the databases all crash on a Saturday morning.
\end{itemize}

In these cases, we (hopefully calmly) \emph{evaluate the risks and Take
Action}.

This is \textbf{Panic Invariance}: your methodology shouldn't need to
change given the amount of pressure or importance on the table.

\hypertarget{invariances-2-scale-invariance}{%
\section{Invariances \#2: Scale
Invariance}\label{invariances-2-scale-invariance}}

Another test of a methodology is that it shouldn't fall down when
applied at different \emph{scales}. Because, if it does, this implies
that there is something wrong with the methodology. The same is true of
physical laws: if they don't apply under all circumstances, then that
implies something is wrong. For example, Newton's Laws of Motion fail to
calculate the orbital period of Mercury, which led to Einstein trying to
improve on them with the
\href{https://en.wikipedia.org/wiki/Theory_of_relativity}{Theory of
Relativity}.

Some methodologies are designed for certain scales: Extreme Programming
is designed for small, co-located teams. And, that's useful. But the
fact it doesn't scale tells us something about it: chiefly, that it
considers certain \emph{kinds} of risk, while ignoring others. At small
scales, that works ok, but at larger scales, other risks (such as team
Coordination Risk) increase too fast for it to work.

So ideally, a methodology should be applicable at \emph{any} scale:

\begin{itemize}
\tightlist
\item
  A single class or function
\item
  A collection of functions, or a library
\item
  A project team
\item
  A department
\item
  An entire organisation
\end{itemize}

If the methodology \emph{fails at a particular scale}, this tells you
something about the risks that the methodology isn't addressing. It's
fine to have methodologies that work at different scales, and on
different problems. One of the things Risk-First explores is trying to
place methodologies and practices within a framework to say \emph{when}
they are applicable.

\hypertarget{value-vs-speed}{%
\section{Value vs Speed}\label{value-vs-speed}}

\hypertarget{upside-risk}{%
\subsection{``Upside Risk''}\label{upside-risk}}

``Upside Risk'' isn't a commonly used term: industry tends to prefer
``value'', as in ``Is this a value-add project?''. There is plenty of
theory surrounding \textbf{Value}, such as Porter's
\href{https://en.wikipedia.org/wiki/Value_chain}{Value Chain} and
\href{https://en.wikipedia.org/wiki/Net_present_value}{Net Present
Value}. This is all fine so long as we remember:

\begin{itemize}
\tightlist
\item
  \textbf{The probability of Pay-Off is risky}: Since the value is
  created in the future, we can't be certain about it happening - we
  should never consider it a done-deal. \textbf{Future Value} is always
  at risk. In finance, for example, we account for this in our future
  cash-flows by discounting them according to the risk of default.
\item
  \textbf{The Pay-Off amount is risky}: Additionally, whereas in a
  financial transaction (like a loan, say), we might know the size of a
  future payment, in IT projects we can rarely be sure that they will
  deliver a certain return. On some fixed-contract projects this
  sometimes is not true: there may be a date when the
  payment-for-delivery gets made, but mostly we'll be expecting an
  uncertain pay-off.
\item
  Humans tend to be optimists (especially when there are lots of Hidden
  Risks), hence our focus on Downside Risk. Sometimes though, it's good
  to stand back and look at a scenario and think: am I capturing all the
  Upside Risk here?
\end{itemize}

\hypertarget{speed}{%
\subsection{Speed}\label{speed}}

For example, in \href{http://a.co/d/ddWGTB2}{Rapid Development} by Steve
McConnell we have the following diagram:

\begin{figure}
\centering
\includegraphics{images/generated/introduction/pillars_smc-400dpi.png}
\caption{Pillars, From Rapid Development By Steve McConnell}
\end{figure}

And, this is \emph{fine}, McConnell is structuring the process from the
perspective of \emph{delivering as quickly as possible}. However, here,
I want to turn this on it's head. Software Development from a risk-first
perspective is an under-explored technique, and I believe it offers some
useful insights. So the aim here is to present the case for viewing
software development like this:

\begin{figure}
\centering
\includegraphics{images/generated/introduction/pillars_kite9-400dpi.png}
\caption{Pillars, re-arranged}
\end{figure}

As we will see, \emph{Speed} (or Schedule Risk as we will term it) is
one risk amongst others that need to be considered from a
risk-management perspective. There's no point in prioritising
\emph{speed} if the software fails in production due to Operational Risk
issues and damages trust in the product.

\hypertarget{eisenhowers-box}{%
\subsection{Eisenhower's Box}\label{eisenhowers-box}}

\begin{figure}
\centering
\includegraphics{images/generated/introduction/eisenhowers_box.png}
\caption{A basic ``Eisenhower box'' to help evaluate urgency and
importance. Items may be placed at more precise points within each
quadrant. - Adapted From
\href{https://en.wikipedia.org/wiki/Time_management}{Time Management,
\emph{Wikipedia}}}
\end{figure}

Eisenhower's Box is a simple model allowing us to consider \emph{two}
aspects of risk at the same time:

\begin{itemize}
\tightlist
\item
  How valuable the work is (Importance, Value).
\item
  How soon it is needed (Urgency, Time).
\end{itemize}

The problem is, we now need to take a call on whether to do something
that is \emph{urgent} or something that is \emph{important}.

\hypertarget{discounting}{%
\section{Discounting}\label{discounting}}

Net Present Value allows us to discount value in the future, which
offers us a way to reconcile these two variables. The further in the
future the value is realised, the bigger the discount. This is done
because payment \emph{now} is better than payment in the future: there
is the risk that something will happen to prevent that future payment.
This is why we have \emph{interest rates} on loan payments.

In the diagram, you can see two future payments, Payment \textbf{A} of
Â£100 due in one year, and Payment \textbf{B} of Â£150 due in 10 years. By
discounting at a given rate (here at a high rate of 20\% per year) we
can compare their worth \emph{now}. At this discount rate, Payment
\textbf{A}, - arriving next year - has a far greater value.

\begin{figure}
\centering
\includegraphics{images/numbers/npv.png}
\caption{Net Present Value Discounting}
\end{figure}

Can we do the same thing with risk? Let's introduce the concept of Net
Present Risk, or NPR:

\begin{quote}
Net Present Risk is the \emph{Impact} of a Future risk, discounted to a
common level of \emph{Urgency}.
\end{quote}

Let's look at a quick example to see how this could work out. Let's say
you had the following risks:

\begin{itemize}
\tightlist
\item
  Risk \textbf{A}, which will cost you Â£50 in 5 day's time.
\item
  Risk \textbf{B}, which will cost you Â£70 in 8 day's time.
\end{itemize}

Which has the biggest NPR? Well, it depends on the discount rate that
you apply. Let's assume we are discounting at 6\% per \emph{day}. A
graph of the discounted risks looks like this:

\begin{figure}
\centering
\includegraphics{images/numbers/npr1.png}
\caption{Net Present Risk, 6\% Discount Rate}
\end{figure}

On this basis, the biggest NPR is \textbf{B}, at about Â£45. If we
increase the discount factor to 20\%, we get a different result:

\begin{figure}
\centering
\includegraphics{images/numbers/npr2.png}
\caption{Net Present Risk, 20\% Discount Rate}
\end{figure}

Now, risk \textbf{A} is bigger.

Because this is \emph{Net} Present Risk, we can also use it to make
decisions about whether or not to mitigate risks. Let's assume the cost
of mitigating any risk \emph{right now} is Â£40. Under the 6\% regime,
only Risk \textbf{B} is worth mitigating today, because you spend Â£40
today to get rid of Â£45 of risk (today).

Under the 20\% regime, neither are worth mitigating. The 20\% Discount
Rate may reflect that sometimes, future risks just don't materialise.

\hypertarget{discounting-the-future-to-zero}{%
\subsection{Discounting the Future To
Zero}\label{discounting-the-future-to-zero}}

I have worked in teams sometimes where the blinkers go down, and the
only thing that matters is \emph{now}. Anything with a horizon over a
week is irrelevant. Regimes of such
\href{https://en.wikipedia.org/wiki/Hyperinflation}{hyper-inflation} are
a sure sign that something has \emph{really broken down} within a
project. Consider in this case a Discount Factor of 60\% per day, and
the following risks:

\begin{itemize}
\tightlist
\item
  Risk A: Â£10 cost, happening \emph{tomorrow}
\item
  Risk B: Â£70 cost, happening in \emph{5 days}.
\end{itemize}

Risk B is almost irrelevant under this regime, as this graph shows:

\begin{figure}
\centering
\includegraphics{images/numbers/npr3.png}
\caption{Net Present Risk, 60\% Discount Rate}
\end{figure}

Why do things like this happen? Often, the people involved are under
incredible job-stress: usually they are threatened on a daily basis, and
therefore feel they have to react. In a similar way, publicly-listed
companies also often apply short-term focus, because they only care
about the \emph{next annual report}, which limits their horizons and
ability to consider future risk.

Under these circumstances, we often see \emph{Pooh-Bear
Procrastination}:

\begin{quotation}

``Here is Edward Bear coming downstairs now, bump, bump, bump, on the
back of his head, behind Christopher Robin. It is, as far as he knows,
the only way of coming downstairs, but sometimes he feels that there
really is another way\ldots{}if only he could stop bumping for a moment
and think of it!''

\sourceatright{\href{http://amzn.eu/d/acJ5a2j}{\textemdash  A. A. Milne, \emph{Winne-the-Pooh}}}
\end{quotation}

\hypertarget{is-this-scientific}{%
\section{Is This Scientific?}\label{is-this-scientific}}

Enough with the numbers and the theory: Risk-First is an attempt to
provide a practical framework, rather than a scientifically rigorous
analysis. For software development, you should probably \emph{give up}
on trying to compute risk numerically. You \emph{can't} work out how
long a software project will take based purely on an analysis of (say)
\emph{function points}. (Whatever you define them to be).

\begin{itemize}
\tightlist
\item
  First, there isn't enough scientific evidence for an approach like
  this. We \emph{can} look at collected data about IT projects, but
  techniques and tools advance rapidly.
\item
  Second, IT projects have too many confounding factors, such as
  experience of the teams, technologies used etc. That is, the risks
  faced by IT projects are \emph{too diverse} and \emph{hard to
  quantify} to allow for meaningful comparison from one to the next.
\item
  Third, as soon as you \emph{publish a date} it changes the
  expectations of the project (see Student Syndrome).
\item
  Fourth, metrics get misused and gamed (as we will see in a later
  chapter).
\end{itemize}

Reality is messy. Dressing it up with numbers doesn't change that and
you risk fooling yourself. If this is the case, is there any hope at all
in what we're doing? Yes: \emph{forget precision}. You should, with
experience be able to hold up two separate risks and answer the
question, ``is this one bigger than this one?''

With that in mind, let's look at how we can meet reality as fast and
often as possible.

\hypertarget{cadence}{%
\chapter{Cadence}\label{cadence}}

Let's go back to the model again, introduced in Meeting Reality:

\begin{figure}
\centering
\includegraphics{images/generated/introduction/model_vs_reality_2-400dpi.png}
\caption{Meeting Reality: reality is changed and so is your internal
model.}
\end{figure}

As you can see, it's an idealized \textbf{Feedback Loop}.

How \emph{fast} should we go round this loop? The longer you leave your
goal in mind, the longer it'll be before you find out how it really
stacks up against reality.

Testing your goals in mind against reality early and safely is how
you'll manage risk effectively, and to do this, you need to set up
\textbf{Feedback Loops}. e.g.

\begin{itemize}
\tightlist
\item
  \textbf{Bug Reports and Feature Requests} tell you how the users are
  getting on with the software.
\item
  \textbf{Monitoring Tools and Logs} allow you to find out how your
  software is doing in reality.
\item
  \textbf{Dog-Fooding} i.e using the software you write yourself might
  be faster than talking to users.
\item
  \textbf{\href{https://en.wikipedia.org/wiki/Continuous_delivery}{Continuous
  Delivery}} is about putting software into production as soon as it's
  written.
\item
  \textbf{Integration Testing} is a faster way of meeting \emph{some}
  reality than continually deploying code and re-testing it manually.
\item
  \textbf{Unit Testing} is a faster feedback loop than Integration
  Testing.
\item
  \textbf{Compilation} warns you about logical inconsistencies in your
  code.
\end{itemize}

.. and so on.

\hypertarget{time-reality-trade-off}{%
\subsection{Time / Reality Trade-Off}\label{time-reality-trade-off}}

This list is arranged so that at the top, we have the most visceral,
most \emph{real} feedback loop, but at the same time, the slowest.

At the bottom, a good IDE can inform you about errors in your Internal
Model in real time, by way of highlighting compilation errors . So, this
is the fastest loop, but it's the most \emph{limited} reality.

Imagine for a second that you had a special time-travelling machine.
With it, you could make a change to your software, and get back a report
from the future listing out all the issues people had faced using it
over its lifetime, instantly.

That'd be neat, eh? If you did have this, would there be any point at
all in a compiler? Probably not, right?

The whole \emph{reason} we have tools like compilers is because they
give us a short-cut way to get some limited experience of reality
\emph{faster} than would otherwise be possible. Because, cadence is
really important: the faster we test our ideas, the more quickly we'll
find out if they're correct or not.

\hypertarget{development-cycle-time}{%
\subsection{Development Cycle Time}\label{development-cycle-time}}

Developers often ignore the fast feedback loops at the bottom of the
list above, because the ones nearer the top \emph{will do}. In the worst
cases, changing two lines of code, running the build script, deploying
and then manually testing out a feature. And then repeating.

If you're doing it over and over, this is a terrible waste of time. And,
you get none of the benefit of a permanent suite of tests to run again
in the future.

The
\href{http://www.agilenutshell.com/episodes/41-testing-pyramid}{Testing
Pyramid} hints at this truth:

\begin{itemize}
\tightlist
\item
  \textbf{Unit Tests} have a \emph{fast feedback loop}, so have
  \emph{lots of them}.
\item
  \textbf{Integration Tests} have a slightly \emph{slower feedback
  loop}, so have \emph{few of them}. Use them when you can't write unit
  tests (at the application boundaries).
\item
  \textbf{Manual Tests} have a \emph{very slow feedback loop}, so have
  \emph{even fewer of them}. Use them as a last resort.
\end{itemize}

\begin{figure}
\centering
\includegraphics{images/generated/introduction/testing_pyramid-400dpi.png}
\caption{The Testing Pyramid}
\end{figure}

\hypertarget{production}{%
\subsection{Production}\label{production}}

You could take this chapter to mean that Continuous Delivery (CD) is
always and everywhere a good idea. That's not a bad take-away, but it's
clearly more nuanced than that.

Yes, CD will give you faster feedback loops, but even getting things
into production is not the whole story: the feedback loop isn't complete
until people have used the code, and reported back to the development
team.

The right answer is to use multiple feedback loops:

\begin{figure}
\centering
\includegraphics{images/generated/introduction/cadence-400dpi.png}
\caption{Different actions have different feedback loops}
\end{figure}

In the next chapter De-Risking we're going to introduce a few more
useful terms for thinking about risk.

\hypertarget{de-risking}{%
\chapter{De Risking}\label{de-risking}}

It's important not only to consider the Attendant Risks you're trying to
mitigate, but the ones you're likely to pick up in the process. This
means picking a careful path through the Risk Landscape. This is the
essence of \emph{De-Risking}.

\begin{quotation}

``To take steps to make (something) less risky or less likely to involve
a financial loss.''

\sourceatright{\href{https://en.oxforddictionaries.com/definition/de-risk}{\textemdash  De-Risk,\emph{OxfordDictionaries.com}}}
\end{quotation}

Some simple examples of this might be:

\begin{itemize}
\tightlist
\item
  \textbf{Safety-nets and ropes} de-risk climbing. But, the activity of
  climbing itself is otherwise much unchanged.
\item
  \textbf{Backups and Source-Control} de-risk the development process by
  reducing the impact of computer failure. Our process is changed
  \emph{slightly} by this imposition, but we're not massively
  inconvenienced.
\item
  \textbf{Insurance} de-risks owning a house, going on holiday or
  driving a car. Usually, the payment is small enough not to impact us
  too much.
\item
  \textbf{The National Health Service (NHS)} de-risks medical expense by
  pooling health-care costs across the entire population. If you were
  struck down with a debilitating illness, then at least you wouldn't
  also have to pay to get better.
\end{itemize}

Let's look at some common strategies for De-Risking.

\hypertarget{mitigate}{%
\section{Mitigate}\label{mitigate}}

\textbf{Mitigating} the risk is taking steps towards minimising either
it's likelihood or impact (as we discussed in the Evaluating Risk
chapter). This is the main approach we will be looking at in Part 2.
We'll break down risk into its different types and look at the general
mitigations for each. The examples above of De-Risking were all
mitigations. (Safety-nets, for example, mitigate the impact of hitting
the ground.)

\hypertarget{avoid}{%
\section{Avoid}\label{avoid}}

\textbf{Avoiding} a risk, means taking a route on the Risk Landscape
\emph{around} the risk. For example, if you are working in a team which
has no experience of relational databases, then \emph{storing data in
files} might be a way to avoid the Learning-Curve Risk associated with
this technology.

Of course, you may pick up other, more serious Attendant Risks as a
result: Relational Databases are software solutions to many kinds of
Coordination Risk problem.

\emph{Not} launching an online service \emph{avoids} the Operational
Risk involved in running one. Although you avoid the upsides too.

\hypertarget{transfer}{%
\section{Transfer}\label{transfer}}

\textbf{Transferring} risk means \emph{making it someone else's
problem}. For example, when I buy home insurance, the impact of my house
burning down is reduced. It hasn't gone away completely, but at least
the financial element of it is handled by the insurance company.

In part 2, we'll see how \textbf{Transfer} of risk is an essential
feature of Software as a Service. Inside organisations,
\textbf{Transfer} of risk can become a political game:

\begin{quotation}

``\ldots{} ownership results in `one throat to choke' for audit
functions {[}and{]} from ownership comes responsibility. A lot of the
political footwork in an enterprise revolves around trying to not own
technologies. Who wants to be responsible for Java usage across a
technology function of dozens of thousands of staff, any of whom might
be doing crazy stuff? You first, mate.''

\sourceatright{\href{https://zwischenzugs.com/2018/10/02/why-are-enterprises-so-slow/}{\textemdash  Why Are Enterprises So Slow?, \emph{zwischenzugs.com}}}
\end{quotation}

\hypertarget{ignore-accept}{%
\section{Ignore / Accept}\label{ignore-accept}}

\textbf{Accepting} a risk is to deal with it when it arises. One example
is the Key-Man Risk involved in having a super-star programmer on the
team. Although there would be fallout if they left, they are often
mitigating more risk than they cause.

Another example is using particular software dependencies: Building a
mobile application which requires a Facebook account to log in might
give rise to the risk that people without Facebook accounts can't log
in, but might simplify the software to such an extent that it's
worthwhile.

Whereas \textbf{Accepting} a risk seems to imply an eyes-wide-open
examination, \textbf{Ignoring} seems to imply that either the risk is so
insignificant it doesn't warrant evaluation, or so daunting that it
can't be stared down. Either way, \textbf{Ignoring} a risk amounts to
the same thing as \textbf{Accepting} it, since you're not doing anything
about it.

\textbf{Accepting} a risk has to occur \emph{before} we can
\textbf{Mitigate} it.

\hypertarget{a-nice-problem-to-have}{%
\subsection{A Nice Problem To Have}\label{a-nice-problem-to-have}}

\textbf{Ignoring} or \textbf{Accepting} risks is a lot less work than
\textbf{Mitigating} them, and sometimes it can feel negligent to just
add them to the backlog or risk-register without doing anything
immediately about them. One useful test I have found is whether ``This
would be a nice problem to have''. For example:

\begin{quotation}

\begin{quote}
``Running out of space in the database would be a nice problem to have,
because it would mean we have lots of users''
\end{quote}

\end{quotation}

\begin{quotation}

\begin{quote}
``Users complaining about lacking function X would be a nice problem to
have, because it would mean they were using the system''
\end{quote}

\end{quotation}

Applying this kind of logic at the start of a project leads you towards
building a
\href{https://en.wikipedia.org/wiki/Minimum_viable_product}{Minimum
Viable Product}.

\hypertarget{learned-helplessness}{%
\subsection{Learned Helplessness}\label{learned-helplessness}}

Sometimes, risks just go away on their own.
\href{https://en.wikipedia.org/wiki/Learned_helplessness}{Learned
Helplessness} on the other hand, is where we \emph{could} do something
about the risk, but fail to see that as an option:

\begin{quotation}

``Learned helplessness is behaviour typical of animals, and in rare
cases humans, that occurs when the subject endures repeatedly painful or
otherwise aversive stimuli which it is unable to escape or avoid. After
such experience, the organism often fails to learn or accept''escape" or
``avoidance'' in new situations where such behavior would likely be
effective. "

\sourceatright{\href{https://en.wikipedia.org/wiki/Learned_helplessness}{\textemdash  Learned Helplessness, \emph{Wikipedia}}}
\end{quotation}

\hypertarget{contain}{%
\section{Contain}\label{contain}}

\textbf{Containing} risks means setting aside sufficient time or money
to deal with them if they occur. This is an excellent approach for
Hidden Risk or entire sets of minor Attendant Risks.

Whenever a project-manager builds slack into a project plan, this is
\textbf{Containment}. ``Time-Boxing'' is also containment: this is where
you give a piece of work a week (say) to prove itself. If it can't be
done in this time, we move on and try a different approach.

In the chapter on Schedule Risk we are going to look in detail at how
this works.

\hypertarget{exploit}{%
\section{Exploit}\label{exploit}}

\textbf{Exploiting} as a strategy usually means taking advantage of the
upside of a risk. For example, ensuring enough stock is available to
mitigate the risk of a rush on sales over the Christmas period, or
ensuring your website has enough bandwidth to capture all the traffic
headed towards it after it's featured on television.

Going back to the example of home insurance, the Insurance company is
\textbf{exploiting} the risk of my house burning down by selling me
insurance. This is a common pattern: wherever there is risk, there is
likely to be a way to profit from it.

Later, in the chapter on Process Risk we'll be looking at how
\textbf{exploiting risk} can happen organically within a company.

\hypertarget{re-cap}{%
\section{Re-cap}\label{re-cap}}

Let's look at the journey so far:

\begin{itemize}
\item
  In A Simple Scenario we looked at how risk pervades every goal we have
  in life, big or small. We saw that risk stems from the fact that our
  Internal Model of the world couldn't capture everything about reality,
  and so some things were down to chance.
\item
  In the Development Process we looked at how common software
  engineering conventions like Unit Testing, User Acceptance Testing and
  Integration could help us manage the risk of taking an idea to
  production, by \emph{gradually} introducing it to reality in stages.
\item
  Then, generalizing the lessons of the Development Process article, we
  examined the idea that Meeting Reality frequently helps flush out
  Hidden Risks and improve your Internal Model.
\item
  In It's All Risk Management we took a leap of faith: Could
  \emph{everything} we do just be risk management? And we looked at the
  RAID log and thought that maybe it could be.
\item
  Next, in A Software Project Scenario we looked at how you could treat
  the project-as-a-whole as a risk management exercise, and treat the
  goals from one day to the next as activities to mitigate risk.
\item
  Evaluating Risk was an aside, looking at some terminology and the
  useful concept of a Risk Register.
\item
  We looked at Cadence, and how feedback loops allow you Navigate the
  Risk Landscape more effectively, by showing you more quickly when
  you're going wrong.
\end{itemize}

What this has been building towards is supplying us with a vocabulary
with which to communicate to our team-mates about which Risks are
important to us, which actions we believe are the right ones, and which
tools we should use.

In the next chapter we will see an example of this in action.

\hypertarget{a-conversation}{%
\chapter{A Conversation}\label{a-conversation}}

After so much theory, it seems like it's time to look at how we can
apply these principles in the real world.

The following is based the summary of a real issue around the time of
writing. It's heavily edited and anonymized, and I've tried to add the
Risk-First vocabulary along the way, but otherwise, it's real.

Some background: \textbf{Synergy} is an online service with an
app-store, and \textbf{Eve} and \textbf{Bob} are developers working for
\textbf{Large Corporation LTD}, which wants to have an application
accepted into Synergy's app-store.

Synergy's release process means that the app-store submission must
happen in a few weeks, so this is something of a hard deadline: if we
miss it, the next opportunity for release will be four months away.

\hypertarget{a-risk-conversation}{%
\section{A Risk Conversation}\label{a-risk-conversation}}

\textbf{Eve}: We've got a problem with the Synergy security review.

\textbf{Bob}: Tell me.

\textbf{Eve}: Well, you know Synergy did their review and asked us to
upgrade our Web Server to only allow TLS version 1.1 and greater?

\textbf{Bob}: Yes, I remember: We discussed it as a team and thought the
simplest thing would be to change the security settings on the Web
Server, but we all felt it was pretty risky. We decided that in order to
flush out Hidden Risk, we'd upgrade our entire production site to use it
\emph{now}, rather than wait for the app launch.

\textbf{Eve}: Right, and it \emph{did} flush out Hidden Risk: some of
our existing software broke on Windows 7, which sadly we still need to
support. So, we had to back it out.

\textbf{Bob}: Ok, well I guess it's good we found out \emph{now}. It
would have been a disaster to discover this after the app had gone live
on Synergy's app-store.

\textbf{Eve}: Yes. So, what's our next-best action to mitigate this?

\textbf{Bob}: Well, we could go back to Synergy and ask them for a
reprieve, but I think it'd be better to mitigate this risk now if we
can\ldots{} they'll definitely want it changed at some point.

\textbf{Eve}: How about we run two web-servers? One for the existing
content, and one for our new Synergy app? We'd have to get a new
external IP address, handle DNS setup, change the firewalls, and then
deploy a new version of the Web Server software on the production boxes.

\textbf{Bob}: This feels like there'd be a lot of Attendant Risk: we're
adding Complexity Risk to our estate, and all of this needs to be
handled by the Networking Team, so we're picking up a lot of Bureaucracy
Risk. I'm also worried that there are too many steps here, and we're
going to discover loads of Hidden Risks as we go.

\textbf{Eve}: Well, you're correct on the first one. But, I've done this
before not that long ago for a Chinese project, so I know the process -
we shouldn't run into any new Hidden Risk.

\textbf{Bob}: OK, fair enough. But isn't there something simpler we can
do? Maybe some settings in the Web Server?

\textbf{Eve}: Well, if we were using Apache, yes, it would be easy to do
this. But, we're using Baroque Web Server, and it \emph{might} support
it, but the documentation isn't very clear.

\textbf{Bob}: OK, and upgrading to Apache is a \emph{big} risk, right?
We'd have to migrate all of our configuration\ldots{}

\textbf{Eve}: Yes, let's not go there. So, \emph{changing} the settings
on Baroque, we have the risk that it's not supported by the software and
we're back where we started. Also, if we isolate the Synergy app stuff
now, we can mess around with it at any point in future, which is a big
win in case there are other Hidden Risks with the security changes that
we don't know about yet.

\textbf{Bob}: OK, I can see that buys us something, but time is really
short and we have holidays coming up.

\textbf{Eve}: Yes. How about for now, we go with the isolated server,
and review next week? If it's working out, then great, we continue with
it. Otherwise, if we're not making progress next week, then it'll be
because our isolation solution is meeting more risk than we originally
thought. In that case, we can attempt the settings change instead.

\textbf{Bob}: Fair enough, it sounds like we're managing the risk
properly, and because we can hand off a lot of this to the Networking
Team, we can get on with mitigating our biggest risk on the project, the
authentication problem, in the meantime.

\textbf{Eve}: Right. I'll check in with the Networking Team each day and
make sure it doesn't get forgotten.

\hypertarget{isnt-it-obvious}{%
\section{Isn't It Obvious?}\label{isnt-it-obvious}}

At this point, you might be wondering what all the fuss is about. This
stuff is all obvious! It's what we do anyway! Perhaps. Risk management
\emph{is} what we do anyway:

\begin{quotation}

``We've survived 200,000 years as humans. Don't you think there's a
reason why we survived? We're good at risk management.''

\sourceatright{\href{https://www.zerohedge.com/news/2018-03-13/taleb-best-thing-society-bankruptcy-goldman-sachs}{\textemdash  Nassim Nicholas Taleb, author of \emph{The Black Swan}}}
\end{quotation}

The problem is that although all this \emph{is} obvious, it appears to
have largely escaped codification within the literature, practices and
methodologies of software development. Further, while it is obvious,
there is a huge hole: Successful De-Risking depends heavily on
individual experience and talent.

In the next chapter, we are going to briefly look at software
methodology, and how it comes up short in when addressing risk.

\part{Risk}

\part{Application}

\hypertarget{coming-next}{%
\chapter{Coming Next}\label{coming-next}}

\begin{itemize}
\tightlist
\item
  preview of what's to come in part 3.
\end{itemize}

Bad to leave on the failure notes, let's talk about some successes.

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\setcounter{enumi}{2}
\tightlist
\item
  What's To Come
\end{enumerate}

\begin{itemize}
\tightlist
\item
  risk based debugging.
\item
  risk based coding.
\end{itemize}

\hypertarget{estimates}{%
\chapter{Estimates}\label{estimates}}

In this chapter, we're going to put a Risk-First spin on the process of
Estimating. But, in order to get there, we first need to start with
understanding \emph{why} we estimate. We're going to look at some ``Old
Saws'' of software estimation and what we can learn from them. Finally,
we'll bring our Risk-First menagerie to bear on de-risking the
estimation process.

\hypertarget{the-purpose-of-estimating}{%
\section{The Purpose Of Estimating}\label{the-purpose-of-estimating}}

Why bother estimating at all? There are two reasons why estimates are
useful:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  \textbf{To allow for the creation of \emph{events}.} As we saw in
  Deadline Risk, if we can put a date on something, we can mitigate lots
  of Coordination Risk. Having a \emph{release date} for a product
  allows whole teams of people to coordinate their activities in ways
  that hugely reduce the need for Communication. ``Attack at dawn''
  allows disparate army units to avoid the Coordination Risk inherent in
  ``attack on my signal''. This is a \emph{good reason for estimating},
  because by using events you are mitigating Coordination Risk. This is
  often called a \emph{hard deadline}.
\item
  \textbf{To allow for the estimation of the Pay-Off of an action.} This
  is a \emph{bad reason for estimating}, as we will discuss in detail
  below. But briefly, the main issue is that Pay-Off isn't just about
  figuring out Schedule Risk - you should be looking at all the other
  Attendant Risks of the action too.
\end{enumerate}

\hypertarget{how-estimates-fail}{%
\section{How Estimates Fail}\label{how-estimates-fail}}

Estimates are a huge source of contention in the software world:

\begin{quotation}

``Typically, effort estimates are over-optimistic and there is a strong
over-confidence in their accuracy. The mean effort overrun seems to be
about 30\% and not decreasing over time.''

\sourceatright{\href{https://en.m.wikipedia.org/wiki/Software_development_effort_estimation}{\textemdash  Software Development Effort Estimation, \emph{Wikipedia}}.}
\end{quotation}

In their research ``Anchoring and Adjustment in Software Estimation'',
\href{http://www.cs.toronto.edu/\%7Esme/papers/2005/ESEC-FSE-05-Aranda.pdf}{Aranda
and Easterbrook} asked developers split into three groups (A, B and
Control) to give individual estimates on how long a piece of software
would take to build. They were each given the same specification.
However:

\begin{itemize}
\tightlist
\item
  Group A was given the hint: ``I admit I have no experience with
  software, but I guess it will take about two months to finish''.
\item
  Group B were given the same hint, except with \emph{20} months.
\end{itemize}

How long would members of each group estimate the work to take? The
results were startling. On average:

\begin{itemize}
\tightlist
\item
  Group A estimated 5.1 months.
\item
  The Control Group estimated 7.8 months.
\item
  Group B estimated 15.4 months.
\end{itemize}

The anchor mattered more than experience, how formal the estimation
method, or \emph{anything else}. \emph{We can't estimate time at all}.

\hypertarget{is-risk-to-blame}{%
\section{Is Risk To Blame?}\label{is-risk-to-blame}}

Why is it so bad? The problem with a developer answering a question such
as:

\begin{quotation}

\begin{quote}
``How long will it take to deliver X?''
\end{quote}

\end{quotation}

Is the following:

\begin{itemize}
\tightlist
\item
  The developer and the client likely don't agree on exactly what X is,
  and any description of it is inadequate anyway (Invisibility Risk).
\item
  The developer has a less-than-complete understanding of the
  environment he will be delivering X in (Complexity Risk and Map And
  Territory Risk.
\item
  The developer has some vague ideas about how to do X, but he'll need
  to try out various approaches until he finds exactly the right one
  (Boundary Risk and Learning-Curve Risk).
\item
  The developer has no idea what Hidden Risk will surface when he starts
  work on it.
\item
  The developer has no idea what will happen if he takes too long and
  misses the date by a day/week/month/year (Schedule Risk).
\end{itemize}

\ldots{} and so on.

The reason the estimate of \emph{time} is wrong is because All Activity
Is About Mitigating Risk and the estimate of \emph{risk} is wrong.

So what are we to do? It's a problem as old as software itself, and in
deference to that, let's examine the estimating problem via some ``Old
Saws''.

\hypertarget{old-saw-no.1-the-10x-developer}{%
\section{Old Saw No.~1: The ``10X
Developer''}\label{old-saw-no.1-the-10x-developer}}

\begin{quotation}

``A 10X developer is an individual who is thought to be as productive as
10 others in his or her field. The 10X developer would produce 10 times
the outcomes of other colleagues, in a production, engineering or
software design environment.''

\sourceatright{\href{https://www.techopedia.com/definition/31673/10X-developer}{\textemdash  10X Developer, \emph{Techopedia}}}
\end{quotation}

Let's try and pull this apart:

\begin{itemize}
\tightlist
\item
  How do we measure this ``productivity''? In Risk-First terms, this is
  about taking action to \emph{transform} our current position on the
  Risk Landscape to a position of more favourable risk. A ``10X
  Developer'' then must be able to take actions that have much higher
  Pay-Off than a ``1X Developer''. That is, mitigating more existing
  risk, and generating less Attendant Risk.
\item
  It stands to reason then, that someone taking action \emph{faster}
  will leaving us with less Schedule Risk.
\item
  However, if they are \emph{more expensive}, they may leave us with
  greater Funding Risk afterwards.
\item
  But, Schedule Risk isn't the only risk being transformed: The result
  might be bugs, expensive new dependencies or spaghetti-code
  complexity.
\item
  The ``10X'' developer \emph{must} also leave behind less of these kind
  of risks too.
\item
  That means that the ``10X Developer'' isn't merely faster, but
  \emph{taking different actions}. They are able to use their talent and
  experience to see actions with greater pay-off than the 1X Developer.
\end{itemize}

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/1x-10x-400dpi.png}
\caption{1x Task vs 10X Task}
\end{figure}

Does the ``10X Developer'' even exist? Crucially, it would seem that
such a thing would be predicated on the existence of the ``1X
Developer'', who gets ``1X'' worth of work done each day. It's not clear
that there is any such thing as an average developer who is mitigating
risk at an average rate.

Even good developers have bad days, weeks or projects. Taking Action is
like placing a bet. Sometimes you lose and the Pay-Off doesn't appear:

\begin{itemize}
\tightlist
\item
  The Open-Source software you're trying to apply to a problem doesn't
  solve it in the way you need.
\item
  A crucial use-case of the problem turns out to change the shape of the
  solution entirely, leading to lots of rework.
\item
  An assumption about how network security is configured turns out to be
  wrong, leading to a lengthy engagement with the infrastructure team.
\end{itemize}

The easiest way to be the ``10X developer'' is to have \emph{done the
job before}. If you're coding in a familiar language, with familiar
libraries and tools, delivering a cookie-cutter solution to a problem in
the same manner you've done several times before, then you will be a
``10X Developer'' compared to \emph{you doing it the first time}:

\begin{itemize}
\tightlist
\item
  There's no Learning Curve Risk, because you already learnt everything.
\item
  There's no Dead End Risk because you already know all the right
  choices to make.
\end{itemize}

\hypertarget{old-saw-no.2-quality-speed-cost-pick-any-two}{%
\section{Old Saw No.~2: Quality, Speed, Cost: Pick Any
Two}\label{old-saw-no.2-quality-speed-cost-pick-any-two}}

\begin{quotation}

\begin{quote}
``The Project Management Triangle (called also the Triple Constraint,
Iron Triangle and Project Triangle) is a model of the constraints of
project management. While its origins are unclear, it has been used
since at least the 1950s. It contends that:
\end{quote}

\end{quotation}

\begin{quote}
\begin{itemize}
\tightlist
\item
  The quality of work is constrained by the project's budget, deadlines
  and scope (features).
\item
  The project manager can trade between constraints.
\item
  Changes in one constraint necessitate changes in others to compensate
  or quality will suffer."

  \begin{itemize}
  \tightlist
  \item
    \href{https://en.wikipedia.org/wiki/Project_management_triangle}{Project
    Management Triangle, \emph{Wikipedia}}
  \end{itemize}
\end{itemize}
\end{quote}

From a Risk-First perspective, we can now see that this is an
over-simplification. If \emph{quality} is a Feature Fit metric,
\emph{deadlines} is Schedule Risk and \emph{budget} refers to Funding
Risk then that leaves us with a lot of risks unaccounted for:

\begin{itemize}
\tightlist
\item
  I can deliver a project in very short order by building a bunch of
  screens that \emph{do nothing} (accruing \_stunning levels of
  Implementation Risk as I go).
\item
  Or, by assuming a lottery win, the project's budget is fine. (Although
  I would have \emph{huge} Funding Risk because \emph{what are the
  chances of winning the lottery?}.
\item
  Brooks' Law contradicts this by saying you can't trade budget for
  deadlines:
\end{itemize}

\begin{quotation}

``Brooks' law is an observation about software project management
according to which''adding human resources to a late software project
makes it later``.

\sourceatright{\href{https://en.wikipedia.org/wiki/Brooks_law}{\textemdash  Brooks Law, \emph{Wikipedia}}}
\end{quotation}

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/brooks-400dpi.png}
\caption{Brooks' Law, Risk-First Style}
\end{figure}

Focusing on the three variables of the iron triangle isn't enough. You
can game these variables by sacrificing others: we need to be looking at
the project's risk \emph{holistically}.

\begin{itemize}
\tightlist
\item
  There's no point in calling a project complete if the dependencies you
  are using are unreliable or undergoing rapid change
\item
  There's no point in delivering the project on time if it's an
  Operational Risk nightmare, and requires constant round-the-clock
  support and will cost a fortune to \emph{run}. (Working on a project
  that ``hits it's delivery date'' but is nonetheless a broken mess once
  in production is too common a sight.)
\item
  There's no point in delivering a project on-budget if the market has
  moved on and needs different features.
\end{itemize}

\hypertarget{old-saw-no.3-parkinsons-law}{%
\subsection{Old Saw No.~3: Parkinson's
Law}\label{old-saw-no.3-parkinsons-law}}

We've already looked at Parkinson's Law in the chapter on Agency Risk,
but lets recap:

\begin{quotation}

\begin{quote}
``Parkinson's law is the adage that `work expands so as to fill the time
available for its completion'.''
\href{https://en.wikipedia.org/wiki/Parkinsons_law}{Parkinson's Law,
\emph{Wikipedia}}
\end{quote}

\end{quotation}

Let's leave aside the Agency Risk concerns this time. Instead, let's
consider this from a Risk-First perspective. \emph{Of course} work would
expand to fill the time available: \emph{Time available} is an
\emph{absence of Schedule Risk}, it's always going to be sensible to
exchange free time to reduce more serious risks.

This is why projects will \emph{always} take at least as long as is
budgeted for them.

\hypertarget{a-case-study}{%
\subsection{A Case Study}\label{a-case-study}}

Let's look at a quick example of this in action, taken from
\href{http://amzn.eu/d/eTWKOsK}{Rapid Development by Steve McConnell}.
At the point of this excerpt, Carl (the Project Manager) is discussing
the schedule with Bill, the project sponsor:

\begin{quotation}

\begin{quote}
``I think it will take about 9 months, but that's just a rough estimate
at this point,'' Carl said. ``That's not going to work,'' Bill said. ``I
was hoping you'd say 3 or 4 months. We absolutely need to bring that
system in within 6 months. Can you do it in 6?'' \texttt{(1)}
\end{quote}

\end{quotation}

Later in the story, the schedule has slipped twice and is about to slip
again:

\begin{quote}
\ldots{} At the 9-month mark, the team had completed detailed design,
but coding still hadn't begun on some modules. It was clear that Carl
couldn't make the 10-month schedule either. He announced the third
schedule slip number--- to 12 months. Bill's face turned red when Carl
announced the slip, and the pressure from him became more intense.
\texttt{(2)}
\end{quote}

At point \texttt{(2)}, Carl's tries to mitigate Feature Risk by
increasing Schedule Risk, although he knows that Bill will trust him
less for doing this, as shown below:

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/carl1-400dpi.png}
\caption{Carl's Schedule Slip increases Trust and Belief Risks}
\end{figure}

\begin{quote}
Carl began to feel that his job was on the line. Coding proceeded fairly
well, but a few areas needed redesign and reimplementation. The team
hadn't coordinated design details in those areas well, and some of their
implementations conflicted. At the 11-month oversight-committee meeting,
Carl announced the fourth schedule slip--- to 13 months. Bill became
livid. ``Do you have any idea what you're doing?'' he yelled. ``You
obviously don't have any idea! You obviously don't have any idea when
the project is going to be done! I'll tell you when it's going to be
done! It's going to be done by the 13-month mark, or you're going to be
out of a job! I'm tired of being jerked around by you software guys! You
and your team are going to work 60 hours a week until you deliver!''
\texttt{(3)}
\end{quote}

At point \texttt{(3)}, the schedule has slipped again, and Bill has
threatened Carl's job. Why did he do this? Because \emph{he doesn't
trust Carl's evaluation of the Schedule Risk}. By telling Carl that it's
his job on the line, he makes sure Carl appreciates the Schedule Risk.
However, forcing staff to do overtime is a dangerous ploy: it could
disenfranchise the staff, or cause corners to be cut:

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/bill1-400dpi.png}
\caption{Bill's Ultimatum}
\end{figure}

\begin{quote}
Carl felt his blood pressure rise, especially since Bill had backed him
into an unrealistic schedule in the first place. But he knew that with
four schedule slips under his belt, he had no credibility left. He felt
that he had to knuckle under to the mandatory overtime or he would lose
his job. Carl told his team about the meeting. They worked hard and
managed to deliver the software in just over 13 months. Additional
implementation uncovered additional design flaws, but with everyone
working 60 hours a week, they delivered the product through sweat and
sheer willpower. " \texttt{(4)} - McConnell, Steve, \emph{Rapid
Development}
\end{quote}

At point \texttt{(4)}, we see that Bill's gamble worked (for him at
least): the project was delivered on time by the team working overtime
for two months. This was lucky - it seems unlikely that no-one quit and
that the code didn't descend into a mess in that time.

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/team1-400dpi.png}
\caption{Team Response}
\end{figure}

Despite this being a fictional (or fictionalised) example, it rings true
for many projects. What \emph{should} have happened at point
\texttt{(1)}? Both Carl and Bill estimated incorrectly\ldots{} Or did
they?

\hypertarget{agile-estimation}{%
\section{Agile Estimation}\label{agile-estimation}}

One alternative approach, must espoused in DevOps/Agile is to pick a
short-enough period of time (say, two days or two weeks), and figure out
what the most meaningful step towards achieving an objective would be in
that time. By fixing the time period, we remove Schedule Risk from the
equation, don't we?

Well, no. First, how to choose the time period? Schedule Risk tends to
creep back in, in the form of something like
\href{https://en.wikipedia.org/wiki/Man-hour}{Man-Hours} or
\href{https://www.atlassian.com/agile/project-management/estimation}{Story
Points}:

\begin{quotation}

``Story points rate the relative effort of work in a Fibonacci-like
format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100. It may sound
counter-intuitive, but that abstraction is actually helpful because it
pushes the team to make tougher decisions around the difficulty of
work.''

\sourceatright{\href{https://www.atlassian.com/agile/project-management/estimation}{\textemdash  Story Points, \emph{Atlassian}}}
\end{quotation}

Second, the strategy of picking the two-day action with the greatest
Pay-Off is \emph{often good}. (After all, this is just
\href{https://en.wikipedia.org/wiki/Gradient_descent}{Gradient Descent},
and that's a perfectly good way for training
\href{https://en.wikipedia.org/wiki/Machine_learning}{Machine Learning}
systems.) However, just like following a river downhill from the top of
a mountain will \emph{often} get you to the sea, it probably won't take
the shortest path, and sometimes you'll get stuck at a lake.

The choice of using gradient descent means that you have given up on
Goals: Essentially, we have here the difference between ``Walking
towards a destination'' and ``Walking downhill''. Or, if you like, a
planned economy and a market economy. But, we don't live in
\emph{either}: everyone lives in some mixture of the two: our
governments \emph{have plans} for big things like roads and hospitals,
and taxes. Other stuff, they leave to the whims of supply and demand. A
project ends up being the same.

\hypertarget{risk-first-estimating}{%
\section{Risk-First Estimating}\label{risk-first-estimating}}

Let's figure out what we can take away from the above experiences:

\begin{itemize}
\tightlist
\item
  \textbf{From the ``10X Developer'' Saw:} the difference made by
  experience implies that a lot of the effort on a project comes from
  Learning Curve Risk and Dead End Risk.
\item
  \textbf{From ``Quality, Speed, Cost'':} we need to be considering
  \emph{all} risks, not just some arbitrary milestones on a project
  plan. Project plans can always be gamed, and you can always leave
  risks unaccounted for in order to hit the goals.
\item
  \textbf{From the Parkinson's Law:} giving people a \emph{time budget},
  you absolve them from Schedule Risk\ldots{} at least until they
  realise they're going to overrun. This gives them one less dimension
  of risk to worry about, but means they end up taking all the time you
  give them, because they are optimising over the remaining risks.
\item
  Finally, the lesson from Agile Estimation is that \emph{just
  iterating} is sometimes not as efficient as \emph{using your intuition
  and experience} to find a more optimal path.
\end{itemize}

How can we synthesise this knowledge, along with what we've learned into
something that makes more sense?

\hypertarget{tip-1-estimating-should-be-about-estimating-pay-off}{%
\subsubsection{\texorpdfstring{Tip \#1: Estimating Should be About
\emph{Estimating Pay
Off}}{Tip \#1: Estimating Should be About Estimating Pay Off}}\label{tip-1-estimating-should-be-about-estimating-pay-off}}

For a given action / road-map / business strategy, what Attendant Risks
are we going to have:

\begin{itemize}
\tightlist
\item
  What bets are we making about where the market will be?
\item
  What Communication Risk will we face explaining our product to people?
\item
  What Feature Fit risks are we likely to have when we get there?
\item
  What Complexity Risks will we face building our software? How can we
  avoid it ending up as a Big Ball Of Mud?
\item
  Where are we likely to face Boundary Risks and Dead End Risks
\end{itemize}

Instead of the Agile Estimation being about picking out a story-point
number based on some idealised amount of typing that needs to be done,
it should be about surfacing and weighing up risks. e.g:

\begin{itemize}
\tightlist
\item
  ``Adding this new database is problematic because it's going to
  massively increase our Dependency Risk.''
\item
  ``I don't think we should have component A interacting with component
  B because it'll introduce extra Communication Risk which we will
  always be tripping over.''
\item
  ``I worry we might not understand what the sales team want and are
  facing Feature Implementation Risk. How about we try and get agreement
  on a specification?''
\end{itemize}

\hypertarget{tip-2-the-risk-landscape-is-increasingly-complex-utilise-this}{%
\subsubsection{Tip \#2: The Risk Landscape is Increasingly Complex:
Utilise
This}\label{tip-2-the-risk-landscape-is-increasingly-complex-utilise-this}}

\begin{figure}
\centering
\includegraphics{images/estimates/central-line.png}
\caption{Journey via the Central Line}
\end{figure}

If you were travelling across London from Ealing (in the West) to
Stratford (in the East) the \emph{fastest} route might be to take the
Central Line. You could do it via the A406 road, which would take a
\emph{bit} longer. It would \emph{feel} like you're mainly going in
completely the wrong direction doing that, but it's much faster than
cutting straight through London and you don't pay the congestion charge.

\begin{figure}
\centering
\includegraphics{images/estimates/car.png}
\caption{Journey by Car}
\end{figure}

In terms of risk, they all have different profiles. You're often delayed
in the car, by some amount. The tube is \emph{generally} reliable, but
when it breaks down or is being repaired it might end up quicker to
walk.

If you were doing this same journey on foot, it's a very direct route,
but would take five times longer. However, if you were making this
journey a hundred years ago, that might be the way you chose (horseback
might be a bit faster).

\begin{figure}
\centering
\includegraphics{images/estimates/foot.png}
\caption{Journey on Foot}
\end{figure}

In the software development past, \emph{building it yourself} was the
only way to get anything done. It was like London \emph{before road and
rail}. Nowadays, you are bombarded with choices. It's actually
\emph{worse than London} because it's not even a two-dimensional
geographic space and there are multitudes of different routes and
acceptable destinations. Journey planning on the software Risk Landscape
is an optimisation problem \emph{par excellence}.

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/risk-landscape-400dpi.png}
\caption{Possible Moves On The Risk Landscape}
\end{figure}

Because the modern Risk Landscape is so complex:

\begin{itemize}
\tightlist
\item
  There can be orders of magnitude difference in \emph{time}, with very
  little difference in destination.
\item
  If it's Schedule Risk you're worried about, \emph{Code Yourself} isn't
  a great solution (for the whole thing, anyway). ``Take the tube'' and
  at least partly use something someone built already. There are
  probably multiple alternatives you can consider.
\item
  If no one has built something similar already, then why is that? Have
  you formulated the problem properly?
\item
  Going the wrong way is \emph{so much easier}.
\item
  Dead-Ends (like a broken Central Line) are much more likely to trip
  you up.
\item
  You need to keep up with developments in your field. Read widely.
\end{itemize}

\hypertarget{tip-3-meet-reality-early-on-the-biggest-risks}{%
\subsubsection{Tip \#3: Meet Reality Early on the Biggest
Risks}\label{tip-3-meet-reality-early-on-the-biggest-risks}}

In getting from A to B on the Risk Landscape, imagine that all the
Attendant Risks are the stages of a journey. Some might be on foot,
train, car and so on. In order for your course of action to work, all
the stages in the journey have to succeed.

Although you might have to make the steps of a journey in some order,
you can still mitigate risk in a different order. For example, checking
the trains are running, making sure your bike is working, booking
tickets and taxis, and so on.

The \emph{sensible} approach would be to test the steps \emph{in order
from weakest to strongest}. This means working out how to meet reality
for each risk in turn, in order from biggest risk to smallest.

Often, a \emph{strategy} will be broken up into multiple actions.
\emph{Which are the riskiest actions?} Figure this out, using the
Risk-First vocabulary and the best experience you can bring to bear,
then, perform the actions which Pay Off the biggest risks first.

As we saw from the ``10X Developer'' Saw, Learning Curve Risk and Dead
End Risk, are likely to be the biggest risks. How can we front-load this
and tackle these earlier?

\begin{itemize}
\tightlist
\item
  \emph{Having a vocabulary} (like the one Risk-First provides) allows
  us to \emph{at least talk about these}. e.g. ``I believe there is a
  Dead End Risk that we might not be able to get this software to run on
  Linux.''
\item
  Build mock-ups:

  \begin{itemize}
  \tightlist
  \item
    UI wireframes allow us to bottom out the Communication Risk of the
    interfaces we build.
  \item
    Spike Solutions allow us to de-risk algorithms and approaches before
    making them part of the main development.
  \item
    Test the market with these and meet reality early.
  \end{itemize}
\item
  Don't pick delivery dates far in the future. Collectively work out the
  biggest risks with your clients, and then arrange the next possible
  date to demonstrate the mitigation.
\item
  Do actions \emph{early} that are \emph{simple} but are nevertheless
  show-stoppers. They are as much a source of Hidden Risk as more
  obviously tricky actions.
\end{itemize}

\hypertarget{tip-4-talk-frankly-about-all-the-risks}{%
\subsubsection{Tip \#4: Talk Frankly About All The
Risks}\label{tip-4-talk-frankly-about-all-the-risks}}

Let's get back to Bill and Carl. What went wrong between points
\texttt{(1)} and \texttt{(2)}? Let's break it down:

\begin{itemize}
\tightlist
\item
  \textbf{Bill \emph{wants} the system in 3-4 months.} It doesn't
  happen.
\item
  \textbf{He says it ``must be delivered in 6 months'', but this doesn't
  happen either.} However, the world (and the project) doesn't end:
  \emph{it carries on}. What does this mean about the truth of his
  statement? Was he deliberately lying, or just espousing his view on
  the Schedule Risk?
\item
  \textbf{Carl's original estimate was 9 months.} Was he working to this
  all along? Did the initial brow-beating over deadlines at point
  \texttt{(1)} contribute to Agency Risk in a way that \emph{didn't}
  happen at point \texttt{(2)}?
\item
  \textbf{Why \emph{did} Bill get so angry?} His understanding of the
  Schedule Risk was, if anything, \emph{worse} than Carl's. It's not
  stated in the account, but it's likely the Trust Risk moved upwards:
  Did his superiors stop trusting him? Was his job at stake?
\item
  \textbf{How could including this risk in the discussion have improved
  the planning process?} Could the conversation have started like this
  instead?
\end{itemize}

\begin{quotation}

\begin{quote}
``I think it will take about 9 months, but that's just a rough estimate
at this point,'' Carl said. ``That's not going to work,'' Bill said. ``I
was hoping you'd say 3 or 4 months. I need to show the board something
by then or I'm worried they will lose confidence in me and this
project''.
\end{quote}

\end{quotation}

\begin{quotation}

\begin{quote}
``OK,'' said Carl. ``But I'm really concerned we have huge Feature Fit
Risk. The task of understanding the requirements and doing the design is
massive.''
\end{quote}

\end{quotation}

\begin{quotation}

\begin{quote}
``Well, in my head it's actually pretty simple,'' said Bill. ``Maybe I
don't have the full picture, or maybe your idea of what to build is more
complex than I think it needs to be. That's a massive risk right there
and I think we should try and mitigate it right now before things
progress. Maybe I'll need to go back to the board if it's worse than I
think.''
\end{quote}

\end{quotation}

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/bill2-400dpi.png}
\caption{Identifying The Action}
\end{figure}

\hypertarget{tip-5-picture-worrying-futures}{%
\subsubsection{Tip \#5: Picture Worrying
Futures}\label{tip-5-picture-worrying-futures}}

The Bill/Carl problem is somewhat trivial (not to mention likely
fictional). How about one from real life? On a project I was working on
in November some years ago, we had two pieces of functionality we
needed: Bulk Uploads and Spock Integration. (It doesn't really matter
what these are). The bulk uploads would be useful \emph{now}. But, the
Spock Integration wasn't due until January. In the Spock estimation
meeting I wrote the following note:

\begin{quotation}

\begin{quote}
``Spock estimates were 4, 11 and 22 until we broke it down into tasks.
Now, estimates are above 55 for the whole piece. And worryingly, we
probably don't have all the tasks. We know we need bulk uploads in
November. Spock is January. So, do bulk uploads?''
\end{quote}

\end{quotation}

The team \emph{wanted} to start Bulk Uploads work. After all, from these
estimates it looked like Spock could easily be completed in January.
However, the question should have been:

\begin{quotation}

\begin{quote}
``If it was February now, and we'd \emph{got nothing done}, what would
our biggest risk be?''
\end{quote}

\end{quotation}

Missing Bulk Uploads wouldn't be a show-stopper, but missing Spock would
be a huge regulatory problem. \emph{Start work on the things you can't
miss.}

This is the essence of De-Risking.

\end{document}  