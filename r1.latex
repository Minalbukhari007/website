% Page setup
\documentclass[11pt]{memoir}
\setstocksize{9.69in}{7.44in}
\settrimmedsize{\stockheight}{\stockwidth}{*}
\setlrmarginsandblock{3.5cm}{2.5cm}{*}
\setulmarginsandblock{2cm}{3cm}{*}
\checkandfixthelayout 
\setheadfoot{\onelineskip}{2\onelineskip}

% Activate to begin paragraphs with an empty line rather than an indent
\usepackage{parskip}    	
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}	

\usepackage{graphicx}					
\usepackage{amssymb}

%SetFonts
\usepackage[T1]{fontenc}
\usepackage{newpxtext,newpxmath}

%Images
\usepackage{graphicx}
% We will generate all images so they have a width 1\maxwidth. This means
% that they will get their normal width if they fit onto the page, but
% are scaled down if they would overflow the margins.
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth
\else\Gin@nat@width\fi}
\makeatother
\let\Oldincludegraphics\includegraphics
\renewcommand{\includegraphics}[1]{\Oldincludegraphics[width=1\maxwidth]{#1}}
\usepackage{rotating}
\usepackage[margin=10pt,font=small,labelfont=bf]{caption}
\captionsetup[figure]{labelfont={bf,it},textfont={bf,it}}
 \setfloatlocations{figure}{thpb}


% Links
\usepackage[hyphens]{url}
\usepackage[unicode=true]{hyperref}
\hypersetup{breaklinks=true,
            bookmarks=true,
            pdfauthor={},
            pdftitle={},
            colorlinks=false,
            urlcolor=black,
            linkcolor=black,
            pdfborder={0 0 0}}

% Footers / Page Numbers            (FIX ME)
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
  \renewcommand{\headrulewidth}{0pt}
  \fancyfoot[LE, RO]{\thepage}
  \fancyfoot[C]{\textsl}

% Tables            
\usepackage{longtable,booktabs}
\usepackage[width=.8\textwidth]{caption}
% These lines are needed to make table captions work with longtable:
\makeatletter
\def\fnum@table{\tablename~\thetable}
\makeatother
\usepackage{rotating}
 \setfloatlocations{table}{thpb}


% Code Sections
\usepackage{listings}
\newcommand{\passthrough}[1]{#1}
\lstnewenvironment{code}{\lstset{basicstyle=\small\ttfamily}}{}


%Links as Notes
\DeclareRobustCommand{\href}[2]{#2\footnote{\url{#1}}}
 \renewcommand{\footnotesize}{\fontsize{6.5pt}{8.5pt}\selectfont}


%Sections
\chapterstyle{veelo}
\setlength{\beforechapskip}{20pt}
\setsechook{\hangsecnum}
\setcounter{secnumdepth}{5}

\begin{document}

\frontmatter

\hypertarget{quick-summary}{%
\chapter{Quick Summary}\label{quick-summary}}

\hypertarget{there-are-lots-of-ways-of-running-software-projects}{%
\section{1. There are Lots of Ways of Running Software
Projects}\label{there-are-lots-of-ways-of-running-software-projects}}

There are lots of different ways to look at a project in-flight. For
example, metrics such as ``number of open tickets'', ``story points'',
``code coverage'' or ``release cadence'' give us a numerical feel for
how things are going and what needs to happen next. We also judge the
health of projects by the practices used on them, such as Continuous
Integration, Unit Testing or Pair Programming.

Software methodologies, then, are collections of tools and practices:
``Agile'', ``Waterfall'', ``Lean'' or ``Phased Delivery'' all prescribe
different approaches to running a project, and are opinionated about the
way they think projects should be done and the tools that should be
used.

None of these is necessarily more ``right'' than another- they are
suitable on different projects at different times.

A key question then is: \textbf{how do we select the right tools for the
job?}

\hypertarget{we-can-look-at-projects-in-terms-of-risks}{%
\section{2. We can Look at Projects in Terms of
Risks}\label{we-can-look-at-projects-in-terms-of-risks}}

One way to examine the project in-flight is by looking at the risks it
faces.

Commonly, tools such as
\href{https://www.projectmanager.com/blog/raid-log-use-one}{RAID logs}
and \href{https://pmtips.net/blog-new/what-does-rag-status-mean}{RAG
status} reporting are used. These techniques should be familiar to
project managers and developers everywhere.

However, the Risk-First view is that we can go much further: that each
item of work being done on the project is to manage a particular risk.
Risk isn't something that just appears in a report, it actually drives
\emph{everything we do}.

For example:

\begin{itemize}
\tightlist
\item
  A story about improving the user login screen can be seen as reducing
  \emph{the risk of users not signing up}.
\item
  A task about improving the health indicators could be seen as
  mitigating \emph{the risk of the application failing and no-one
  reacting to it}.
\item
  Even a task as basic as implementing a new function in the application
  is mitigating \emph{the risk that users are dissatisfied and go
  elsewhere}.
\end{itemize}

One assertion of Risk-First is that \textbf{every action you take on a
project is to manage a risk.}

\hypertarget{we-can-break-down-risks-on-a-project-methodically}{%
\section{3. We Can Break Down Risks on a Project
Methodically}\label{we-can-break-down-risks-on-a-project-methodically}}

Although risk is usually complicated and messy, other industries have
found value in breaking down the types of risks that affect them and
addressing them individually.

For example:

\begin{itemize}
\tightlist
\item
  In manufacturing, \emph{tolerances} allow for calculating the
  likelihood of defects in production.
\item
  In finance, projects and teams are structured around monitoring risks
  like \emph{credit risk}, \emph{market risk} and \emph{liquidity risk}.
\item
  \emph{Insurance} is founded on identifying particular risks and
  providing financial safety-nets for when they occur, such as death,
  injury, accident and so on.
\end{itemize}

Software risks are difficult to quantify, and mostly, the effort
involved in doing so \emph{exactly} would outweigh the benefit.
Nevertheless, there is value in spending time building
\emph{classifications of risk for software}. That's what Risk-First
does: it describes a set of \emph{risk patterns} we see every day on
software projects.

With this in place, we can:

\begin{itemize}
\tightlist
\item
  Talk about the types of risks we face on our projects, using an
  appropriate language.
\item
  Anticipate Hidden Risks that we hadn't considered before.
\item
  Weigh the risks against each other, and decide which order to tackle
  them.
\end{itemize}

\hypertarget{we-can-analyse-tools-and-techniques-in-terms-of-how-they-manage-risk}{%
\section{4. We can Analyse Tools and Techniques in Terms of how they
Manage
Risk}\label{we-can-analyse-tools-and-techniques-in-terms-of-how-they-manage-risk}}

If we accept the assertion above that \emph{all} the actions we take on
a project are about mitigating risks, then it stands to reason that the
tools and techniques available to us on a project are there for
mitigating different types of risks.

For example:

\begin{itemize}
\tightlist
\item
  If we do a Code Review, we are partly trying to minimise the risks of
  bugs slipping through into production, and also manage the Key-Man
  Risk of knowledge not being widely-enough shared.
\item
  If we write Unit Tests, we're addressing the risk of bugs going to
  production, but we're also mitigating against the risk of
  \emph{regression}, and future changes breaking our existing
  functionality.
\item
  If we enter into a contract with a supplier, we are mitigating the
  risk of the supplier vanishing and leaving us exposed. With the
  contract in place, we have legal recourse against this risk.
\end{itemize}

From the above examples, it's clear that \textbf{different tools are
appropriate for managing different types of risks.}

\hypertarget{different-methodologies-are-for-different-risk-profiles}{%
\section{5. Different Methodologies are for Different Risk
Profiles}\label{different-methodologies-are-for-different-risk-profiles}}

In the same way that our tools and techniques are appropriate to dealing
with different risks, the same is true of the methodologies we use on
our projects. We can use a Risk-First approach to examine the different
methodologies, and see which risks they address.

For example:

\begin{itemize}
\tightlist
\item
  \textbf{Agile} methodologies prioritise the risk that requirements
  capture is complicated, error-prone and that requirements change
  easily.
\item
  \textbf{Waterfall} takes the view that development effort is an
  expensive risk, and that we should build plans up-front to avoid
  re-work.
\item
  \textbf{Lean} takes the view that risk lies in incomplete work and
  wasted work, and aims to minimise that.
\end{itemize}

Although many developers have a methodology-of-choice, the argument here
is that there are tradeoffs with all of these choices.

\begin{quotation}

``Methodologies are like \emph{bicycles}, rather than \emph{religions}.
Rather than simply \emph{believing}, we can take them apart and see how
they work. ''

\end{quotation}

\hypertarget{we-can-drive-development-with-a-risk-first-perspective}{%
\section{6. We can Drive Development With a Risk-First
Perspective}\label{we-can-drive-development-with-a-risk-first-perspective}}

We have described a model of risk within software projects, looking
something like this:

\begin{figure}
\centering
\includegraphics{images/generated/executive-summary/pattern_language-400dpi.png}
\caption{Methodologies, Risks, Practices\label{pattern_language.png}}
\end{figure}

How do we take this further?

One idea explored is the \emph{Risk Landscape}: Although the software
team can't remove risk from their project, they can take actions that
move them to a place in the Risk Landscape where the risks on the
project are more favourable than where they started.

From there, we examine basic risk archetypes you will encounter on the
software project, to build up a Taxonomy of Software Risk, and look at
which specific tools you can use to mitigate each kind of risk.

Then, we look at different software practices, and how they manage
various risks. Beyond this we examine the question: \emph{how can a
Risk-First approach inform the use of this practice?}

For example:

\begin{itemize}
\tightlist
\item
  If we are introducing a \textbf{Sign-Off} in our process, we have to
  balance the risks it \emph{mitigates} (coordination of effort, quality
  control, information sharing) with the risks it \emph{introduces}
  (delays and process bottlenecks).
\item
  If we build in \textbf{Redundancy}, this mitigates the risk of a
  \emph{single point of failure}, but introduces risks around
  \emph{synchronizing data} and \emph{communication} between the
  systems.
\item
  If we introduce \textbf{Process}, this may make it easier to
  \emph{coordinate as a team} and \emph{measure performance} but may
  lead to bureaucracy, focusing on the wrong goals or over-rigid
  interfaces to those processes.
\end{itemize}

Risk-First aims to provide a framework in which we can \emph{analyse
these actions} and weigh up \emph{accepting} versus \emph{mitigating}
risks.

\textbf{Still interested? Then dive into reading the introduction.}

\mainmatter
\part{Introduction}

\part{The Risk Landscape}

\hypertarget{operational-risk}{%
\chapter{Operational Risk}\label{operational-risk}}

\begin{quotation}

``The risk of loss resulting from inadequate or failed internal
processes, people and systems or from external events.''

\sourceatright{\href{https://en.wikipedia.org/wiki/Operational_risk\#Definition}{\textemdash  Operational Risk, \emph{Wikipedia}}}
\end{quotation}

In this chapter we're going to start considering the realities of
running software systems in the real world.

Here, we're going to set the scene by looking at what constitutes an
Operational Risk, and then look at the related discipline of Operations
Management. Following this background, we'll apply the Risk-First model
and dive into the various mitigations for Operational Risk.

\hypertarget{operational-risks}{%
\section{Operational Risks}\label{operational-risks}}

When building software, it's tempting to take a very narrow view of the
dependencies of a system, but Operational Risks are often caused by
dependencies we \emph{don't} consider - i.e.~the \textbf{Operational
Context} within which the system is operating. Here are some examples:

\begin{itemize}
\tightlist
\item
  \textbf{Staff Risks:}

  \begin{itemize}
  \tightlist
  \item
    Freak weather conditions affecting ability of staff to get to work,
    interrupting the development and support teams.
  \item
    Reputational damage caused when staff are rude to the customers.
  \end{itemize}
\item
  \textbf{Reliability Risks:}

  \begin{itemize}
  \tightlist
  \item
    A data-centre going off-line, causing your customers to lose access.
  \item
    A power cut causing backups to fail.
  \item
    Not having enough desks for everyone to sit at.
  \end{itemize}
\item
  \textbf{Process Risks:}

  \begin{itemize}
  \tightlist
  \item
    Regulatory change, which means you have to adapt your business
    model.
  \item
    Insufficient controls which means you don't notice when some
    transactions are failing, leaving you out-of-pocket.
  \item
    Data loss because of bugs introduced during an untested release.
  \end{itemize}
\item
  \textbf{Software Dependency Risk:}

  \begin{itemize}
  \tightlist
  \item
    Hackers exploit weaknesses in a piece of 3rd party software,
    bringing your service down.
  \end{itemize}
\item
  \textbf{Agency Risk:}

  \begin{itemize}
  \tightlist
  \item
    Suppliers deciding to stop supplying you with something you need.
  \item
    Workers going on strike.
  \item
    Employees trying to steal from the company (bad actors).
  \item
    Other crime, such as hackers stealing data.
  \end{itemize}
\end{itemize}

.. basically, a long laundry-list of everything that can go wrong due to
operating in ``The Real World''. Although we've spent a lot of time
looking at the varieties of Dependency Risk on a software project, with
Operational Risk we have to consider that these dependencies will fail
in any number of unusual ways, and we can't be ready for all of them.
Nevertheless, preparing for this comes under the umbrella of Operations
Management.

\hypertarget{operations-management}{%
\section{Operations Management}\label{operations-management}}

\begin{figure}
\centering
\includegraphics{images/generated/risks/operational/slack-400dpi.png}
\caption{A Risk-First Model of Operations Management, inspired by the
work of Slack \emph{et al.}\label{slack.png}}
\end{figure}

If we are designing a software system to ``live'' in the real world, we
have to be mindful of the Operational Context we're working in, and
craft our software and processes accordingly. This view of the ``wider''
system is the discipline of Operations Management.

Figure \ref{slack.png} is a Risk-First interpretation of
\href{http://amzn.eu/d/b6ZjuMu}{Slack \emph{et al}'s model of Operations
Management}. This model breaks down some of the key abstractions of the
discipline: a \textbf{Transform Process} (the \textbf{Operation} itself)
is embedded in the wider \textbf{Operational Context}, which supplies it
with three key dependencies:

\begin{itemize}
\tightlist
\item
  \textbf{Resources}: Whether \emph{transformed} resources (like
  electricity or information, say) or \emph{transforming} resources
  (like staff or equipment).
\item
  \textbf{Customers}: Which supply it with money in return for goods and
  services.
\item
  \textbf{Operational Strategy}: The goals and objectives of the
  operation, informed by the reality of the environment it operates in.
\end{itemize}

We have looked at processes like the \textbf{Transform Process} in the
chapter on Process Risk. The healthy functioning of this process is the
domain of Operations Management, and (as per Slack \emph{et al.}) this
involves the following types of actions:

\begin{itemize}
\tightlist
\item
  \textbf{Control}: Ensuring that the Operation is working according to
  it's targets. This includes day-to-day quality control and monitoring
  of the Transform Process.
\item
  \textbf{Planning}: This covers aspects such as capacity planning,
  forecasting and project planning. This is about making sure the
  transform process has targets to meet and the resources to meet them.
\item
  \textbf{Design}: Ensuring that the design of the product and the
  transform process itself fulfils an \textbf{Operational Strategy}.
\item
  \textbf{Improvement}: Improving the operation in response to changes
  in the \textbf{Environment} and the \textbf{Operational Strategy},
  detecting failure and recovering from it.
\end{itemize}

Let's look at each of these actions in turn.

\hypertarget{control}{%
\section{Control}\label{control}}

\begin{figure}
\centering
\includegraphics{images/generated/risks/operational/monitoring-detection-400dpi.png}
\caption{Control, Monitoring And
Detection\label{monitoring-detection.png}}
\end{figure}

Since humans and machines have different areas of expertise, and because
Operational Risks are often novel, it's often not optimal to try and
automate everything. A good operation will consist of a mix of human and
machine actors, each playing to their strengths (see the table below).

\begin{longtable}[]{@{}ll@{}}
\toprule
Humans Are\ldots{} & Machines Are\ldots{}\tabularnewline
\midrule
\endhead
Good at novel situations & Good at repetitive situations\tabularnewline
Good at adaptation & Good at consistency\tabularnewline
Expensive at scale & Cheap at scale\tabularnewline
Reacting and Anticipating & Recording\tabularnewline
\bottomrule
\end{longtable}

The aim is to build a human-machine operational system that is
\href{https://en.wikipedia.org/wiki/Homeostasis}{\emph{Homeostatic}}.
This is the property of living things to try and maintain an equilibrium
(for example, body temperature or blood glucose levels), but also
applies to systems at any scale. The key to homeostasis is to build
systems with feedback loops, even though this leads to more complex
systems overall. Figure \ref{monitoring-detection.png} shows some of the
actions involved in these kind of feedback loops.

As we saw in Map and Territory Risk, it's very easy to fool yourself,
especially around
\href{https://en.wikipedia.org/wiki/Performance_indicator}{Key
Performance Indicators (KPIs)} and metrics. Large organisations have
\href{https://en.wikipedia.org/wiki/Audit}{Audit} functions precisely to
guard against their own internal failing processes and Agency Risk.
Audits could be around software tools, processes, practices, quality and
so on. Practices such as
\href{https://en.wikipedia.org/wiki/Continual_improvement_process}{Continuous
Improvement} and
\href{https://en.wikipedia.org/wiki/Total_quality_management}{Total
Quality Management} also figure here.

\hypertarget{the-operational-context}{%
\subsection{The Operational Context}\label{the-operational-context}}

There are plenty of Hidden Risks within the environment the operation
exists within, and these change all the time in response to economic or
political change. In order to manage a risk, you have to uncover it, so
part of Operations Management is to look for trouble:

\begin{itemize}
\tightlist
\item
  \textbf{Environmental Scanning} is all about trying to determine which
  changes in the environment are going to impact your operation. Here,
  we are trying to determine the level of Dependency Risk we face for
  external dependencies, such as \emph{suppliers}, \emph{customers} and
  \emph{markets}. Tools like
  \href{https://en.wikipedia.org/wiki/PEST_analysis}{PEST} are relevant
  here, as is
\item
  \textbf{\href{https://en.wikipedia.org/wiki/Penetration_test}{Penetration
  Testing}} is looking for security weaknesses within the operation. See
  \href{https://en.wikipedia.org/wiki/OWASP}{OWASP} for examples.
\item
  \textbf{\href{https://en.wikipedia.org/wiki/Vulnerability_management}{Vulnerability
  Management}} is keeping up-to-date with vulnerabilities in Software
  Dependencies.
\end{itemize}

\hypertarget{planning}{%
\section{Planning}\label{planning}}

\begin{figure}
\centering
\includegraphics{images/generated/risks/operational/forecasting-planning-400dpi.png}
\caption{Forecasting and Planning
Actions\label{forecasting-planning.png}}
\end{figure}

In order to \emph{control} an operation, we need targets and plans to
\emph{control against}. For a system to run well, it needs to carefully
manage unreliable dependencies, and ensure their safety and
availability. In the example of the humans, say, it's the difference
between
\href{https://en.wikipedia.org/wiki/Hunter-gatherer}{Hunter-Gathering}
(picking up food where we find it) and
\href{https://en.wikipedia.org/wiki/Agriculture}{Agriculture}
(controlling the environment and the resources to grown crops).

As Figure \ref{forecasting-planning.png} shows, we can bring Planning to
bear on dependency management, and this usually falls to the more human
end of the operation.

\hypertarget{design}{%
\section{Design}\label{design}}

\begin{figure}
\centering
\includegraphics{images/generated/risks/operational/design-change-400dpi.png}
\caption{Design and Change Activities\label{design-change.png}}
\end{figure}

Since our operation exists in a world of risks like Red Queen Risk and
Feature Drift Risk, we would expect that the output of our Planning
actions would result in changes to our operation.

While \emph{planning} is a day-to-day operational feedback loop,
\emph{design} is a longer feedback loop changing not just the parameters
of the operation, but the operation itself.

You might think that for an IT operation, tasks like Design belong
within the Development function within an organisation. Often, this is
the case. However separating Development from Operation implies Boundary
Risk between these two functions. For example, the developers might
employ different tools, equipment and processes to the operations team,
resulting in a mismatch when software is delivered.

In recent years, the ``DevOps'' movement has brought this Boundary Risk
into sharper focus. This specifically means:

\begin{itemize}
\tightlist
\item
  Using code to automate previously manual Operations functions, like
  monitoring and releasing.
\item
  Involving Operations in the planning and design, so that the delivered
  software is optimised for the environment it runs in.
\end{itemize}

DevOps heavily borrows from the Agile movement, both of which will be
covered in more detail in Part 4.

\begin{figure}
\centering
\includegraphics{images/devops.png}
\caption{DevOps Activities: Development and Operations activities
overlap one-another (Credit: Kharnagy, Wikipedia)\label{devops.png}}
\end{figure}

\hypertarget{improvement}{%
\section{Improvement}\label{improvement}}

Once exposed to the real world, no system is perfect: we will want to
improve it over time. However, conversely, Operational Risk includes an
element of Trust \& Belief Risk: our \emph{reputation} and the good will
of our customers. This gives us pause: we don't want to destroy good
will created for our software, this is very hard to rebuild.

So there is a tension between ``you only get one chance to make a first
impression'' and ``gilding the lily'' (perfectionism). In the past I've
seen this stated as:

\begin{quotation}

``Pressure to ship vs pressure to improve''

\end{quotation}

\begin{figure}
\centering
\includegraphics{images/generated/risks/operational/ship-it-400dpi.png}
\caption{Balance of Risks from Delivering Software\label{ship-it.png}}
\end{figure}

A Risk-First re-framing of this might be the balance between:

\begin{itemize}
\tightlist
\item
  The perceived Trust \& Belief Risk, Feature Risk and Operational Risk
  of going to production (pressure to improve).
\item
  The perceived Scarcity Risks (such as funding, time available, etc) of
  staying in development (pressure to ship).
\end{itemize}

The ``should we ship?'' decision is therefore a complex one. In Meeting
Reality, we discussed that it's better to do this ``sooner, more
frequently, in smaller chunks and with feedback''. We can meet
Operational Risk \emph{on our own terms} by doing so:

\begin{longtable}[]{@{}ll@{}}
\toprule
\begin{minipage}[b]{0.36\columnwidth}\raggedright
Meet Reality\ldots{}\strut
\end{minipage} & \begin{minipage}[b]{0.58\columnwidth}\raggedright
Techniques\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.36\columnwidth}\raggedright
\textbf{Sooner}\strut
\end{minipage} & \begin{minipage}[t]{0.58\columnwidth}\raggedright
Quality Control Processes, Limited Early-Access Programs, Beta Programs,
Soft Launches, Business Continuity Testing\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.36\columnwidth}\raggedright
\textbf{More Frequently}\strut
\end{minipage} & \begin{minipage}[t]{0.58\columnwidth}\raggedright
Continuous Delivery, Sprints\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.36\columnwidth}\raggedright
\textbf{In Smaller Chunks}\strut
\end{minipage} & \begin{minipage}[t]{0.58\columnwidth}\raggedright
Modular Releases, Microservices, Feature Toggles, Trial
Populations\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.36\columnwidth}\raggedright
\textbf{With Feedback}\strut
\end{minipage} & \begin{minipage}[t]{0.58\columnwidth}\raggedright
User Communities, Support Groups, Monitoring, Logging, Analytics\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{end-of-the-road}{%
\section{End Of The Road}\label{end-of-the-road}}

In a way, actions like \textbf{Design} and \textbf{Improvement} bring us
right back to where we started from: identifying Dependency Risks,
Feature Risks and Complexity Risks that hinders our operation, and
mitigating them through actions like \emph{software development}.

Our safari of risk is finally complete, it's time to look back and what
we've seen in Staging and Classifying.

\part{Tools \& Practices}

\backmatter

\end{document}  