% Page setup
\documentclass[11pt]{memoir}
\setstocksize{9.69in}{7.44in}
\settrimmedsize{\stockheight}{\stockwidth}{*}
\setlrmarginsandblock{3.5cm}{2.5cm}{*}
\setulmarginsandblock{2cm}{3cm}{*}
\checkandfixthelayout 
\setheadfoot{\onelineskip}{2\onelineskip}

% Activate to begin paragraphs with an empty line rather than an indent
\usepackage{parskip}    	
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}	

\usepackage{graphicx}					
\usepackage{amssymb}

%SetFonts
\usepackage[T1]{fontenc}
\usepackage{newpxtext,newpxmath}

%Images
\usepackage{graphicx}
% We will generate all images so they have a width 1\maxwidth. This means
% that they will get their normal width if they fit onto the page, but
% are scaled down if they would overflow the margins.
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth
\else\Gin@nat@width\fi}
\makeatother
\let\Oldincludegraphics\includegraphics
\renewcommand{\includegraphics}[1]{\Oldincludegraphics[width=1\maxwidth]{#1}}
\usepackage{rotating}
\usepackage[margin=10pt,font=small,labelfont=bf]{caption}
\captionsetup[figure]{labelfont={bf,it},textfont={bf,it}}
 \setfloatlocations{figure}{thpb}


% Links
\usepackage[hyphens]{url}
\usepackage[unicode=true]{hyperref}
\hypersetup{breaklinks=true,
            bookmarks=true,
            pdfauthor={},
            pdftitle={},
            colorlinks=false,
            urlcolor=black,
            linkcolor=black,
            pdfborder={0 0 0}}

% Footers / Page Numbers            (FIX ME)
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
  \renewcommand{\headrulewidth}{0pt}
  \fancyfoot[LE, RO]{\thepage}
  \fancyfoot[C]{\textsl}

% Tables            
\usepackage{longtable,booktabs}
\usepackage[width=.8\textwidth]{caption}
% These lines are needed to make table captions work with longtable:
\makeatletter
\def\fnum@table{\tablename~\thetable}
\makeatother
\usepackage{rotating}
 \setfloatlocations{table}{thpb}


% Code Sections
\usepackage{listings}
\newcommand{\passthrough}[1]{#1}
\lstnewenvironment{code}{\lstset{basicstyle=\small\ttfamily}}{}


%Links as Notes
\DeclareRobustCommand{\href}[2]{#2\footnote{\url{#1}}}
 \renewcommand{\footnotesize}{\fontsize{6.5pt}{8.5pt}\selectfont}


%Sections
\chapterstyle{veelo}
\setlength{\beforechapskip}{20pt}
\setsechook{\hangsecnum}
\setcounter{secnumdepth}{5}

\begin{document}

\frontmatter

\title{Risk-First Software Development: The Menagerie}
\author{Rob Moffat}

\begin{titlingpage}

\hspace{0.05\textwidth}

\centering

{\Huge\bfseries\textsc{Risk-First}}\\[1\baselineskip]

{\Huge\bfseries\textsc{Software Development}}\\[2\baselineskip]

{\Huge\textit{Volume 1: The Menagerie}}\\[4\baselineskip]

{\Oldincludegraphics[width=0.5\textwidth]{images/R1_logo_grue.png}}\\[4\baselineskip]

{\Huge\textsc{Rob Moffat}}


\end{titlingpage}

\hypertarget{risk-first-the-menagerie}{%
\section{Risk-First: The Menagerie}\label{risk-first-the-menagerie}}

By Rob Moffat

Copyright \copyright 2018 Kite9 Ltd.

All rights reserved. No part of this publication may be reproduced,
distributed, or transmitted in any form or by any means, including
photocopying, recording, or other electronic or mechanical methods,
without the prior written permission of the publisher, except in the
case of brief quotations embodied in critical reviews and certain other
noncommercial uses permitted by copyright law. For permission requests,
write to the publisher, addressed ``Attention: Permissions
Coordinator,'' at the address below.

ISBN: 9781717491855

\hypertarget{credits}{%
\subsection{Credits}\label{credits}}

tbd

Cover Images: Biodiversity Heritage Library. Biologia
Centrali-Americana. Insecta. Rhynchota. Hemiptera-Homoptera. Volume 1
(1881-1905)

Cover Design By P. Moffat (\texttt{peter@petermoffat.com})

Thanks to:

\hypertarget{books-in-the-series}{%
\subsection{Books In The Series}\label{books-in-the-series}}

\begin{itemize}
\tightlist
\item
  \textbf{Risk-First: The Menagerie:} Book one of the Risk-First series
  argues the case for viewing \emph{all} of the activities on a software
  project through the lens of \emph{managing risk}. It introduces the
  menagerie of different risks you're likely to meet on a software
  project, naming and classifying them so that we can try to understand
  them better.
\item
  \textbf{Risk-First: Tools and Practices:} Book two of the Risk-First
  series explores the relationship between software project risks and
  the tools and practices we use to mitigate them. Due for publication
  in 2020.
\end{itemize}

\hypertarget{online}{%
\subsection{Online}\label{online}}

Material for the books is freely available to read, drawn from
\texttt{risk-first.org}.

\hypertarget{published-by}{%
\subsection{Published By}\label{published-by}}

\begin{verbatim}
Kite9 Ltd.
14 Manor Close
Colchester
CO6 4AR
\end{verbatim}

\newpage
\setcounter{tocdepth}{0}
\tableofcontents

\hypertarget{preface}{%
\chapter{Preface}\label{preface}}

Welcome to Risk-First!

Let's cover some of the big questions up-front: The why, what, who, how
and where of \emph{The Menagerie}.

\hypertarget{why}{%
\section{Why}\label{why}}

\begin{quotation}

``Scrum, Waterfall, Lean, Prince2: what do they all have in common?''

\end{quotation}

I've started this because, on my career journey, I've noticed that the
way I do things doesn't seem to match up with the way the books
\emph{say} it should be done. And, I found this odd and wanted to
explore it further. Hopefully, you, the reader, will find something of
use in this.

I started with this observation: \emph{Development Teams} put a lot of
faith in methodology. Sometimes, this faith is often so strong it
borders on religion. (Which in itself is a concern.) For some, this is
Prince2. For others, it might be Lean or Agile.

\emph{Developers} put a lot of faith in \emph{particular tools} too.
Some developers are pro-or-anti-Java, others are pro-or-anti-XML. All of
them have their views coloured by their \emph{experiences} (or lack of)
with these tools. Was this because their past projects \emph{succeeded}
or \emph{failed} because of them?

As time went by, I came to see that the choice of methodology, process
or tool was contingent on the problem being solved, and the person
solving the problem. We don't face a shortage of tools in IT, or a
shortage of methodologies, or a shortage of practices. Essentially, that
all the tools and methodologies that the industry had supplied were
there to help \emph{minimize the risk of my project failing}.

This book considers that perspective: that building software is all
about \emph{managing risk}, and that these methodologies are
acknowledgements of this fact, and they differ because they have
\emph{different ideas} about which are the most important \emph{risks to
manage}.

\hypertarget{what-this-is}{%
\section{What This Is}\label{what-this-is}}

Hopefully, after reading this, you'll come away with:

\begin{itemize}
\tightlist
\item
  An appreciation of how risk underpins everything we do as developers,
  whether we want it to or not.
\item
  A framework for evaluating methodologies, tools and practices and
  choosing the right one for the task-at-hand.
\item
  A recontextualization of the software process as being an exercise in
  mitigating different kinds of risk.
\item
  The tools to help you decide when a methodology or tool is
  \emph{letting you down}, and the vocabulary to argue for when it's a
  good idea to deviate from it.
\end{itemize}

This is not intended to be a rigorously scientific work: I don't believe
it's possible to objectively analyze a field like software development
in any meaningful, statistically significant way. (For one, things just
change too fast.)

\begin{quotation}

``I have this Pattern''

\sourceatright{\href{http://c2.com/ppr/wiki/WikiPagesAboutWhatArePatterns/HaveThisPattern.html}{\textemdash  Attributed to Ward Cunningham, \emph{Have This Pattern, C2 Wiki}}}
\end{quotation}

Does that diminish it? If you have visited the
\href{https://tvtropes.org}{TVTropes} website, you'll know that it's a
set of web-pages describing \emph{common patterns} of narrative,
production, character design etc. to do with fiction. For example:

\begin{quotation}

``Sometimes, at the end of a Dream Sequence or an All Just a Dream
episode, after the character in question has woken up and demonstrated
any {[}lesson{]} that the dream might have been communicating, there's
some small hint that it wasn't a dream after all, even though it quite
obviously was\ldots{} right?.''

\sourceatright{\href{https://tvtropes.org/pmwiki/pmwiki.php/Main/OrWasItADream}{\textemdash  Or Was It a Dream?, \emph{TVTropes}}}
\end{quotation}

Is it scientific? No.~Is it correct? Almost certainly. TVTropes is a set
of \emph{empirical patterns} for how stories on TV and other media work.
It's really useful, and a lot of fun. (Warning: it's also incredibly
addictive).

In the same way, ``\href{http://amzn.eu/d/3cOwTkH}{Design Patterns:
Elements of Reusable Object-Oriented Software}'', is a book detailing
patterns of \emph{structure} within Object-Oriented programming, such
as:

\begin{quotation}

``{[}The{]} Adapter {[}pattern{]} allows classes with incompatible
interfaces to work together by wrapping its own interface around that of
an already existing class\ldots{}''

\sourceatright{\href{https://en.wikipedia.org/wiki/Design_Patterns}{\textemdash  Design Patterns, \emph{Wikipedia}}}
\end{quotation}

\hypertarget{patterns-for-practitioners}{%
\subsection{Patterns For
Practitioners}\label{patterns-for-practitioners}}

Design Patterns aimed to be a set of \emph{useful} patterns which
practitioners could use in their software to achieve certain goals. ``I
have this pattern'' was a phrase used to describe how they had seen a
certain set of constraints before, and how they had solved it in
software.

This book was a set of experts handing down their battle-tested
practices for other developers to use, and, whether you like patterns or
not, knowing them is an important part of being a software developer, as
you will see them used everywhere you go and probably use them yourself.

In the same way, Risk-First aims to be a set of \emph{Patterns for
Software Risk}. Hopefully after reading this book, you will see where
risk hides in software projects, and have a name for it when you see it.

\hypertarget{towards-a-periodic-table}{%
\subsection{Towards a ``Periodic
Table''}\label{towards-a-periodic-table}}

In the latter chapters of ``The Menagerie'' we try to assemble these
risk patterns into a cohesive whole. Projects fail because of risks, and
risks arise from predictable sources.

\hypertarget{what-this-is-not}{%
\subsection{What This is Not}\label{what-this-is-not}}

This is not intended to be a rigorously scientific work: I don't believe
it's possible to objectively analyze a field like software development
in any meaningful, statistically significant way. (For one, things just
change too fast.)

Neither is this site isn't going to be an exhaustive guide of every
possible software development practice and methodology. That would just
be too long and tedious.

Neither is this really a practitioner's guide to using any particular
methodology: If you've come here to learn the best way to do
Retrospectives, then you're in the wrong place. There are plenty of
places you can find that information already. Where possible, this site
will link to or reference concepts on Wikipedia or the wider internet
for further reading on each subject.

\hypertarget{who}{%
\section{Who}\label{who}}

This work is intended to be read by people who work on software
projects, and especially those who are involved in managing software
projects.

If you work collaboratively with other people in a software process, you
should find Risk-First a useful lexicon of terms to help describe the
risks you face.

But here's a warning: This is going to be a depressing book to read. It
is book one of a two-book series, but in \textbf{Book One} you only get
to meet the bad guy.

While \textbf{Book Two} is all about \emph{how to succeed}, This book is
all about how projects \emph{fail}. In it, we're going to try and put
together a framework for understanding the risk of failure, in order
that we can reconstruct our understanding of our activities on a project
based on avoiding it.

So, if you are interested in \emph{avoiding your project failing}, this
is probably going to be useful knowledge.

\hypertarget{for-developers}{%
\subsection{For Developers}\label{for-developers}}

Risk-First is a tool you can deploy to immediately improve your ability
to plan your work.

Frequently, as developers we find software methodologies ``done to us''
from above. Risk-First is a toolkit to help \emph{take apart}
methodologies like Scrum, Lean and Prince2, and understand them.
Methodologies are \emph{bicycles}, rather than \emph{religions}. Rather
than simply \emph{believing}, we can take them apart and see how they
work.

\hypertarget{for-project-managers-and-team-leads}{%
\subsection{For Project Managers and Team
Leads}\label{for-project-managers-and-team-leads}}

All too often, Project Managers don't have a full grasp of the technical
details of their projects. And this is perfectly normal, as the
specialization belongs below them. However, projects fail because risks
materialize, and risks materialize because the devil is in those
details.

This seems like a lost cause, but there is hope: the ways in which risks
materialize on technical projects is the same every time. With
Risk-First we are attempting to name each of these types of risk, which
allows for a dialog with developers about which risks they face, and the
order they should be tackled.

Risk-First allows a project manager to pry open the black box of
development and talk with developers about their work, and how it will
affect the project. It is another tool in the (limited) arsenal of
techniques a project manager can bring to bear on the task of delivering
a successful project.

\hypertarget{how}{%
\section{How}\label{how}}

One of the original proponents of the Agile Manifesto, Kent Beck, begins
his book Extreme Programming by stating:

\begin{quotation}

``It's all about risk''

\sourceatright{\href{http://amzn.eu/d/gUQjnbF}{\textemdash  Kent Beck, \emph{Extreme Programming Explained}}}
\end{quotation}

This is a promising start. From there, he introduces his methodology,
Extreme Programming, and explains how you can adopt it in your team, the
features to observe and the characteristics of success and failure.
However, while \emph{Risk} has clearly driven the conception of Extreme
Programming, there is no clear model of software risk underpinning the
work, and the relationship between the practices he espouses and the
risks he is avoiding are hidden.

In this book, we are going to introduce a model of software project
risk. This means that in \textbf{Book Two} (Risk-First: Tools and
Practices), we can properly analyse Extreme Programming (and Scrum,
Waterfall, Lean and all the others) and \emph{understand} what drives
them. Since they are designed to deliver successful software projects,
they must be about managing risks, and we will uncover \emph{exactly
which risks} and \emph{how they do it}.

\hypertarget{where}{%
\section{Where}\label{where}}

All of the material for this book is available Open Source on
\href{https://github.com}{github.com}, and at the
\href{https://risk-first.org}{risk-first.org} website. Please visit,
your feedback is appreciated.

There is no compulsion to buy a print or digital version of the book,
but we'd really appreciate the support. So, if you've read this and
enjoyed it, how about buying a copy for someone else to read?

\hypertarget{a-note-on-references}{%
\subsection{A Note on References}\label{a-note-on-references}}

Where possible, references are to the
\href{https://wikipedia.org}{Wikipedia} website. Wikipedia is not
perfect. There is a case for linking to the original articles and
papers, but by using Wikipedia references are free and easy for everyone
to access, and hopefully will exist for a long time into the future.

On to The Executive Summary

\hypertarget{executive-summary}{%
\chapter{Executive Summary}\label{executive-summary}}

\hypertarget{there-are-lots-of-ways-of-running-software-projects}{%
\section{1. There are Lots of Ways of Running Software
Projects}\label{there-are-lots-of-ways-of-running-software-projects}}

There are lots of different ways to look at a project in-flight. For
example, metrics such as ``number of open tickets'', ``story points'',
``code coverage'' or ``release cadence'' give us a numerical feel for
how things are going and what needs to happen next. We also judge the
health of projects by the practices used on them, such as Continuous
Integration, Unit Testing or Pair Programming.

Software methodologies, then, are collections of tools and practices:
``Agile'', ``Waterfall'', ``Lean'' or ``Phased Delivery'' all prescribe
different approaches to running a project, and are opinionated about the
way they think projects should be done and the tools that should be
used.

None of these is necessarily more ``right'' than another- they are
suitable on different projects at different times.

A key question then is: \textbf{how do we select the right tools for the
job?}

\hypertarget{we-can-look-at-projects-in-terms-of-risks}{%
\section{2. We can Look at Projects in Terms of
Risks}\label{we-can-look-at-projects-in-terms-of-risks}}

One way to examine the project in-flight is by looking at the risks it
faces.

Commonly, tools such as RAID logs and RAG status reporting are used.
These techniques should be familiar to project managers and developers
everywhere.

However, the Risk-First view is that we can go much further: that each
item of work being done on the project is to manage a particular risk.
Risk isn't something that just appears in a report, it actually drives
\emph{everything we do}.

For example:

\begin{itemize}
\tightlist
\item
  A story about improving the user login screen can be seen as reducing
  \emph{the risk of users not signing up}.
\item
  A task about improving the health indicators could be seen as
  mitigating \emph{the risk of the application failing and no-one
  reacting to it}.
\item
  Even a task as basic as implementing a new function in the application
  is mitigating \emph{the risk that users are dissatisfied and go
  elsewhere}.
\end{itemize}

One assertion of Risk-First is that \textbf{every action you take on a
project is to manage a risk.}

\hypertarget{we-can-break-down-risks-on-a-project-methodically}{%
\section{3. We Can Break Down Risks on a Project
Methodically}\label{we-can-break-down-risks-on-a-project-methodically}}

Although risk is usually complicated and messy, other industries have
found value in breaking down the types of risks that affect them and
addressing them individually.

For example:

\begin{itemize}
\tightlist
\item
  In manufacturing, \emph{tolerances} allow for calculating the
  likelihood of defects in production.
\item
  In finance, projects and teams are structured around monitoring risks
  like \emph{credit risk}, \emph{market risk} and \emph{liquidity risk}.
\item
  \emph{Insurance} is founded on identifying particular risks and
  providing financial safety-nets for when they occur, such as death,
  injury, accident and so on.
\end{itemize}

Software risks are difficult to quantify, and mostly, the effort
involved in doing so \emph{exactly} would outweigh the benefit.
Nevertheless, there is value in spending time building
\emph{classifications of risk for software}. That's what Risk-First
does: it describes a set of \emph{risk patterns} we see every day on
software projects.

With this in place, we can:

\begin{itemize}
\tightlist
\item
  Talk about the types of risks we face on our projects, using an
  appropriate language.
\item
  Anticipate Hidden Risks that we hadn't considered before.
\item
  Weigh the risks against each other, and decide which order to tackle
  them.
\end{itemize}

\hypertarget{we-can-analyse-tools-and-techniques-in-terms-of-how-they-manage-risk}{%
\section{4. We can Analyse Tools and Techniques in Terms of how they
Manage
Risk}\label{we-can-analyse-tools-and-techniques-in-terms-of-how-they-manage-risk}}

If we accept the assertion above that \emph{all} the actions we take on
a project are about mitigating risks, then it stands to reason that the
tools and techniques available to us on a project are there for
mitigating different types of risks.

For example:

\begin{itemize}
\tightlist
\item
  If we do a Code Review, we are partly trying to minimise the risks of
  bugs slipping through into production, and also manage the Key-Man
  Risk of knowledge not being widely-enough shared.
\item
  If we write Unit Tests, we're addressing the risk of bugs going to
  production, but we're also mitigating against the risk of
  \emph{regression}, and future changes breaking our existing
  functionality.
\item
  If we enter into a contract with a supplier, we are mitigating the
  risk of the supplier vanishing and leaving us exposed. With the
  contract in place, we have legal recourse against this risk.
\end{itemize}

From the above examples, it's clear that \textbf{different tools are
appropriate for managing different types of risks.}

\hypertarget{different-methodologies-are-for-different-risk-profiles}{%
\section{5. Different Methodologies are for Different Risk
Profiles}\label{different-methodologies-are-for-different-risk-profiles}}

In the same way that our tools and techniques are appropriate to dealing
with different risks, the same is true of the methodologies we use on
our projects. We can use a Risk-First approach to examine the different
methodologies, and see which risks they address.

For example:

\begin{itemize}
\tightlist
\item
  \textbf{Agile} methodologies prioritise the risk that requirements
  capture is complicated, error-prone and that requirements change
  easily.
\item
  \textbf{Waterfall} takes the view that development effort is an
  expensive risk, and that we should build plans up-front to avoid
  re-work.
\item
  \textbf{Lean} takes the view that risk lies in incomplete work and
  wasted work, and aims to minimise that.
\end{itemize}

Although many developers have a methodology-of-choice, the argument here
is that there are tradeoffs with all of these choices.

\begin{quotation}

``Methodologies are like \emph{bicycles}, rather than \emph{religions}.
Rather than simply \emph{believing}, we can take them apart and see how
they work. ''

\end{quotation}

\hypertarget{we-can-drive-development-with-a-risk-first-perspective}{%
\section{6. We can Drive Development With a Risk-First
Perspective}\label{we-can-drive-development-with-a-risk-first-perspective}}

We have described a model of risk within software projects, looking
something like this:

\begin{figure}
\centering
\includegraphics{images/generated/executive-summary/pattern_language-400dpi.png}
\caption{Methodologies, Risks, Practices\label{pattern_language.png}}
\end{figure}

How do we take this further?

One idea explored is the \emph{Risk Landscape}: Although the software
team can't remove risk from their project, they can take actions that
move them to a place in the Risk Landscape where the risks on the
project are more favourable than where they started.

From there, we examine basic risk archetypes you will encounter on the
software project, to build up a Taxonomy of Software Risk, and look at
which specific tools you can use to mitigate each kind of risk.

Then, we look at different software practices, and how they manage
various risks. Beyond this we examine the question: \emph{how can a
Risk-First approach inform the use of this practice?}

For example:

\begin{itemize}
\tightlist
\item
  If we are introducing a \textbf{Sign-Off} in our process, we have to
  balance the risks it \emph{mitigates} (coordination of effort, quality
  control, information sharing) with the risks it \emph{introduces}
  (delays and process bottlenecks).
\item
  If we build in \textbf{Redundancy}, this mitigates the risk of a
  \emph{single point of failure}, but introduces risks around
  \emph{synchronizing data} and \emph{communication} between the
  systems.
\item
  If we introduce \textbf{Process}, this may make it easier to
  \emph{coordinate as a team} and \emph{measure performance} but may
  lead to bureaucracy, focusing on the wrong goals or over-rigid
  interfaces to those processes.
\end{itemize}

Risk-First aims to provide a framework in which we can \emph{analyse
these actions} and weigh up \emph{accepting} versus \emph{mitigating}
risks.

\textbf{Still interested? Then dive into reading the introduction.}

\mainmatter
\part{Introduction}

\part{Risk}

\part{Tools \& Practices}

\hypertarget{estimates}{%
\chapter{Estimates}\label{estimates}}

In this chapter, we're going to put a Risk-First spin on the process of
Estimating. But, in order to get there, we first need to start with
understanding \emph{why} we estimate. We're going to look at some ``Old
Saws'' of software estimation and what we can learn from them. Finally,
we'll bring our Risk-First menagerie to bear on de-risking the
estimation process.

\hypertarget{the-purpose-of-estimating}{%
\section{The Purpose Of Estimating}\label{the-purpose-of-estimating}}

Why bother estimating at all? There are two reasons why estimates are
useful:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  \textbf{To allow for the creation of \emph{events}.} As we saw in
  Deadline Risk, if we can put a date on something, we can mitigate lots
  of Coordination Risk. Having a \emph{release date} for a product
  allows whole teams of people to coordinate their activities in ways
  that hugely reduce the need for Communication. ``Attack at dawn''
  allows disparate army units to avoid the Coordination Risk inherent in
  ``attack on my signal''. This is a \emph{good reason for estimating},
  because by using events you are mitigating Coordination Risk. This is
  often called a \emph{hard deadline}.
\item
  \textbf{To allow for the estimation of the Pay-Off of an action.} This
  is a \emph{bad reason for estimating}, as we will discuss in detail
  below. But briefly, the main issue is that Pay-Off isn't just about
  figuring out Schedule Risk - you should be looking at all the other
  Attendant Risks of the action too.
\end{enumerate}

\hypertarget{how-estimates-fail}{%
\section{How Estimates Fail}\label{how-estimates-fail}}

Estimates are a huge source of contention in the software world:

\begin{quotation}

``Typically, effort estimates are over-optimistic and there is a strong
over-confidence in their accuracy. The mean effort overrun seems to be
about 30\% and not decreasing over time.''

\sourceatright{\href{https://en.m.wikipedia.org/wiki/Software_development_effort_estimation}{\textemdash  Software Development Effort Estimation, \emph{Wikipedia}}.}
\end{quotation}

In their research ``Anchoring and Adjustment in Software Estimation'',
\href{http://www.cs.toronto.edu/\%7Esme/papers/2005/ESEC-FSE-05-Aranda.pdf}{Aranda
and Easterbrook} asked developers split into three groups (A, B and
Control) to give individual estimates on how long a piece of software
would take to build. They were each given the same specification.
However:

\begin{itemize}
\tightlist
\item
  Group A was given the hint: ``I admit I have no experience with
  software, but I guess it will take about two months to finish''.
\item
  Group B were given the same hint, except with \emph{20} months.
\end{itemize}

How long would members of each group estimate the work to take? The
results were startling. On average:

\begin{itemize}
\tightlist
\item
  Group A estimated 5.1 months.
\item
  The Control Group estimated 7.8 months.
\item
  Group B estimated 15.4 months.
\end{itemize}

The anchor mattered more than experience, how formal the estimation
method, or \emph{anything else}. \emph{We can't estimate time at all}.

\hypertarget{is-risk-to-blame}{%
\section{Is Risk To Blame?}\label{is-risk-to-blame}}

Why is it so bad? The problem with a developer answering a question such
as:

\begin{quotation}

``How long will it take to deliver X?''

\end{quotation}

Seems to be the following:

\begin{itemize}
\tightlist
\item
  The developer and the client likely don't agree on exactly what X is,
  and any description of it is inadequate anyway (Invisibility Risk).
\item
  The developer has a less-than-complete understanding of the
  environment he will be delivering X in (Complexity Risk and Map And
  Territory Risk).
\item
  The developer has some vague ideas about how to do X, but he'll need
  to try out various approaches until he finds something that works
  (Boundary Risk and Learning-Curve Risk).
\item
  The developer has no idea what Hidden Risk will surface when he starts
  work on it.
\item
  The developer has no idea what will happen if he takes too long and
  misses the date by a day/week/month/year (Schedule Risk).
\end{itemize}

\ldots{} and so on.

The reason the estimate of \emph{time} is wrong is because every action
attempts to mitigate risk and the estimate of \emph{risk} is wrong.

So what are we to do? It's a problem as old as software itself, and in
deference to that, let's examine the estimating problem via some ``Old
Saws''.

\hypertarget{old-saw-no.1-the-10x-developer}{%
\section{Old Saw No.~1: The ``10X
Developer''}\label{old-saw-no.1-the-10x-developer}}

\begin{quotation}

``A 10X developer is an individual who is thought to be as productive as
10 others in his or her field. The 10X developer would produce 10 times
the outcomes of other colleagues, in a production, engineering or
software design environment.''

\sourceatright{\href{https://www.techopedia.com/definition/31673/10X-developer}{\textemdash  10X Developer, \emph{Techopedia}}}
\end{quotation}

Let's try and pull this apart:

\begin{itemize}
\tightlist
\item
  How do we measure this ``productivity''? In Risk-First terms, this is
  about taking action to \emph{transform} our current position on the
  Risk Landscape to a position of more favourable risk. A ``10X
  Developer'' then must be able to take actions that have much higher
  Pay-Off than a ``1X Developer''. That is, mitigating more existing
  risk, and generating less Attendant Risk.
\item
  It stands to reason then, that someone taking action \emph{faster}
  will leaving us with less Schedule Risk.
\item
  However, if they are \emph{more expensive}, they may leave us with
  greater Funding Risk afterwards.
\item
  But, Schedule Risk isn't the only risk being transformed: The result
  might be bugs, expensive new dependencies or spaghetti-code
  complexity.
\item
  The ``10X'' developer \emph{must} also leave behind less of these kind
  of risks too.
\item
  That means that the ``10X Developer'' isn't merely faster, but
  \emph{taking different actions}. They are able to use their talent and
  experience to see actions with greater pay-off than the 1X Developer.
\end{itemize}

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/1x-10x-400dpi.png}
\caption{1X Task vs 10X Task\label{1x-10x.png}}
\end{figure}

Does the ``10X Developer'' even exist? Crucially, it would seem that
such a thing would be predicated on the existence of the ``1X
Developer'', who gets ``1X'' worth of work done each day. It's not clear
that there is any such thing as an average developer who is mitigating
risk at an average rate.

Even good developers have bad days, weeks or projects. Taking Action is
like placing a bet. Sometimes you lose and the Pay-Off doesn't appear:

\begin{itemize}
\tightlist
\item
  The Open-Source software you're trying to apply to a problem doesn't
  solve it in the way you need.
\item
  A crucial use-case of the problem turns out to change the shape of the
  solution entirely, leading to lots of rework.
\item
  An assumption about how network security is configured turns out to be
  wrong, leading to a lengthy engagement with the infrastructure team.
\end{itemize}

The easiest way to be the ``10X developer'' is to have \emph{done the
job before}. If you're coding in a familiar language, with familiar
libraries and tools, delivering a cookie-cutter solution to a problem in
the same manner you've done several times before, then you will be a
``10X Developer'' compared to \emph{you doing it the first time}
because:

\begin{itemize}
\tightlist
\item
  There's no Learning Curve Risk, because you already learnt everything.
\item
  There's no Dead End Risk because you already know all the right
  choices to make.
\end{itemize}

\hypertarget{old-saw-no.2-quality-speed-cost-pick-any-two}{%
\section{Old Saw No.~2: Quality, Speed, Cost: Pick Any
Two}\label{old-saw-no.2-quality-speed-cost-pick-any-two}}

\begin{quotation}

``The Project Management Triangle (called also the Triple Constraint,
Iron Triangle and Project Triangle) is a model of the constraints of
project management. While its origins are unclear, it has been used
since at least the 1950s. It contends that:

\end{quotation}

\begin{quotation}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  The quality of work is constrained by the project's budget, deadlines
  and scope (features).
\end{enumerate}

\end{quotation}

\begin{quotation}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\setcounter{enumi}{1}
\tightlist
\item
  The project manager can trade between constraints.
\end{enumerate}

\end{quotation}

\begin{quotation}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\setcounter{enumi}{2}
\tightlist
\item
  Changes in one constraint necessitate changes in others to compensate
  or quality will suffer."
\end{enumerate}

\end{quotation}

\begin{quotation}

\sourceatright{\href{https://en.wikipedia.org/wiki/Project_management_triangle}{\textemdash  Project Management Triangle, \emph{Wikipedia}}}
\end{quotation}

From a Risk-First perspective, we can now see that this is an
over-simplification. If \emph{quality} is a Feature Fit metric,
\emph{deadlines} is Schedule Risk and \emph{budget} refers to Funding
Risk then that leaves us with a lot of risks unaccounted for:

\begin{itemize}
\tightlist
\item
  I can deliver a project in very short order by building a bunch of
  screens that \emph{do nothing} (accruing \emph{stunning} levels of
  Implementation Risk as I go).
\item
  Or, by assuming a lottery win, the project's budget is fine. (Although
  I would have \emph{huge} Funding Risk because \emph{what are the
  chances of winning the lottery?}.)
\item
  Brooks' Law contradicts this by saying you can't trade budget for
  deadlines:
\end{itemize}

\begin{quotation}

``Brooks' law is an observation about software project management
according to which''adding human resources to a late software project
makes it later``.

\sourceatright{\href{https://en.wikipedia.org/wiki/Brooks_law}{\textemdash  Brooks Law, \emph{Wikipedia}}}
\end{quotation}

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/brooks-400dpi.png}
\caption{Brooks' Law, Risk-First Style\label{brooks.png}}
\end{figure}

Focusing on the three variables of the iron triangle isn't enough. You
can game these variables by sacrificing others: we need to be looking at
the project's risk \emph{holistically}.

\begin{itemize}
\tightlist
\item
  There's no point in calling a project complete if the dependencies you
  are using are unreliable or undergoing rapid change
\item
  There's no point in delivering the project on time if it's an
  Operational Risk nightmare, and requires constant round-the-clock
  support and will cost a fortune to \emph{run}. (Working on a project
  that ``hits it's delivery date'' but is nonetheless a broken mess once
  in production is too common a sight.)
\item
  There's no point in delivering a project on-budget if the market has
  moved on and needs different features.
\end{itemize}

\hypertarget{old-saw-no.3-parkinsons-law}{%
\subsection{Old Saw No.~3: Parkinson's
Law}\label{old-saw-no.3-parkinsons-law}}

We've already looked at Parkinson's Law in the chapter on Agency Risk,
but lets recap:

\begin{quotation}

``Parkinson's law is the adage that `work expands so as to fill the time
available for its completion'.''

\sourceatright{\href{https://en.wikipedia.org/wiki/Parkinsons_law}{\textemdash  Parkinson's Law, \emph{Wikipedia}}  }
\end{quotation}

Let's leave aside the Agency Risk concerns this time. Instead, let's
consider this from a Risk-First perspective. \emph{Of course} work would
expand to fill the time available: \emph{Time available} is an
\emph{absence of Schedule Risk}, it's always going to be sensible to
exchange free time to reduce more serious risks.

This is why projects will \emph{always} take at least as long as is
budgeted for them.

\hypertarget{a-case-study}{%
\subsection{A Case Study}\label{a-case-study}}

Let's look at a quick example of this in action, taken from
\href{http://amzn.eu/d/eTWKOsK}{Rapid Development by Steve McConnell}.
At the point of this excerpt, Carl (the Project Manager) is discussing
the schedule with Bill, the project sponsor:

\begin{quotation}

``I think it will take about 9 months, but that's just a rough estimate
at this point,'' Carl said. ``That's not going to work,'' Bill said. ``I
was hoping you'd say 3 or 4 months. We absolutely need to bring that
system in within 6 months. Can you do it in 6?'' \texttt{(1)}

\end{quotation}

Later in the story, the schedule has slipped twice and is about to slip
again:

\begin{quotation}

\ldots{} At the 9-month mark, the team had completed detailed design,
but coding still hadn't begun on some modules. It was clear that Carl
couldn't make the 10-month schedule either. He announced the third
schedule slip number--- to 12 months. Bill's face turned red when Carl
announced the slip, and the pressure from him became more intense.
\texttt{(2)}

\end{quotation}

At point \texttt{(2)}, Carl's tries to mitigate Feature Risk by
increasing Schedule Risk, although he knows that Bill will trust him
less for doing this, as shown below:

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/carl1-400dpi.png}
\caption{Carl's Schedule Slip increases Trust and Belief
Risks\label{carl1.png}}
\end{figure}

\begin{quotation}

Carl began to feel that his job was on the line. Coding proceeded fairly
well, but a few areas needed redesign and reimplementation. The team
hadn't coordinated design details in those areas well, and some of their
implementations conflicted. At the 11-month oversight-committee meeting,
Carl announced the fourth schedule slip--- to 13 months. Bill became
livid. ``Do you have any idea what you're doing?'' he yelled. ``You
obviously don't have any idea! You obviously don't have any idea when
the project is going to be done! I'll tell you when it's going to be
done! It's going to be done by the 13-month mark, or you're going to be
out of a job! I'm tired of being jerked around by you software guys! You
and your team are going to work 60 hours a week until you deliver!''
\texttt{(3)}

\end{quotation}

At point \texttt{(3)}, the schedule has slipped again, and Bill has
threatened Carl's job. Why did he do this? Because \emph{he doesn't
trust Carl's evaluation of the Schedule Risk}. By telling Carl that it's
his job on the line, he makes sure Carl appreciates the Schedule Risk.
However, forcing staff to do overtime is a dangerous ploy: it could
disenfranchise the staff, or cause corners to be cut:

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/bill1-400dpi.png}
\caption{Bill's Ultimatum\label{bill1.png}}
\end{figure}

\begin{quotation}

Carl felt his blood pressure rise, especially since Bill had backed him
into an unrealistic schedule in the first place. But he knew that with
four schedule slips under his belt, he had no credibility left. He felt
that he had to knuckle under to the mandatory overtime or he would lose
his job. Carl told his team about the meeting. They worked hard and
managed to deliver the software in just over 13 months. Additional
implementation uncovered additional design flaws, but with everyone
working 60 hours a week, they delivered the product through sweat and
sheer willpower. " \texttt{(4)}

\sourceatright{\href{http://amzn.eu/d/eTWKOsK}{\textemdash  McConnell, Steve, \emph{Rapid Development}}}
\end{quotation}

At point \texttt{(4)}, we see that Bill's gamble worked (for him at
least): the project was delivered on time by the team working overtime
for two months. This was lucky - it seems unlikely that no-one quit and
that the code didn't descend into a mess in that time.

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/team1-400dpi.png}
\caption{Team Response\label{team1.png}}
\end{figure}

Despite this being a fictional (or fictionalised) example, it rings true
for many projects. What \emph{should} have happened at point
\texttt{(1)}? Both Carl and Bill estimated incorrectly\ldots{} Or did
they?

\hypertarget{agile-estimation}{%
\section{Agile Estimation}\label{agile-estimation}}

One alternative approach, must espoused in DevOps/Agile is to pick a
short-enough period of time (say, two days or two weeks), and figure out
what the most meaningful step towards achieving an objective would be in
that time. By fixing the time period, we remove Schedule Risk from the
equation, don't we?

Well, no. First, how to choose the time period? Schedule Risk tends to
creep back in, in the form of something like
\href{https://en.wikipedia.org/wiki/Man-hour}{Man-Hours} or
\href{https://www.atlassian.com/agile/project-management/estimation}{Story
Points}:

\begin{quotation}

``Story points rate the relative effort of work in a Fibonacci-like
format: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100. It may sound
counter-intuitive, but that abstraction is actually helpful because it
pushes the team to make tougher decisions around the difficulty of
work.''

\sourceatright{\href{https://www.atlassian.com/agile/project-management/estimation}{\textemdash  Story Points, \emph{Atlassian}}}
\end{quotation}

Second, the strategy of picking the two-day action with the greatest
Pay-Off is \emph{often good}. (After all, this is just
\href{https://en.wikipedia.org/wiki/Gradient_descent}{Gradient Descent},
and that's a perfectly good way for training
\href{https://en.wikipedia.org/wiki/Machine_learning}{Machine Learning}
systems.) However, just like following a river downhill from the top of
a mountain will \emph{often} get you to the sea, it probably won't take
the shortest path, and sometimes you'll get stuck at a lake.

The choice of using gradient descent means that you have given up on
Goals: Essentially, we have here the difference between ``Walking
towards a destination'' and ``Walking downhill''. Or, if you like, a
planned economy and a market economy. But, we don't live in
\emph{either}: everyone lives in some mixture of the two: our
governments \emph{have plans} for big things like roads and hospitals,
and taxes. Other stuff, they leave to the whims of supply and demand. A
project ends up being the same.

\hypertarget{risk-first-estimating}{%
\section{Risk-First Estimating}\label{risk-first-estimating}}

Let's figure out what we can take away from the above experiences:

\begin{itemize}
\tightlist
\item
  \textbf{From the ``10X Developer'' Saw:} the difference made by
  experience implies that a lot of the effort on a project comes from
  Learning Curve Risk and Dead End Risk.
\item
  \textbf{From ``Quality, Speed, Cost'':} we need to be considering
  \emph{all} risks, not just some arbitrary milestones on a project
  plan. Project plans can always be gamed, and you can always leave
  risks unaccounted for in order to hit the goals.
\item
  \textbf{From the Parkinson's Law:} giving people a \emph{time budget},
  you absolve them from Schedule Risk\ldots{} at least until they
  realise they're going to overrun. This gives them one less dimension
  of risk to worry about, but means they end up taking all the time you
  give them, because they are optimising over the remaining risks.
\item
  Finally, the lesson from Agile Estimation is that \emph{just
  iterating} is sometimes not as efficient as \emph{using your intuition
  and experience} to find a more optimal path.
\end{itemize}

How can we synthesise this knowledge, along with what we've learned into
something that makes more sense?

\hypertarget{tip-1-estimating-should-be-about-estimating-pay-off}{%
\subsubsection{\texorpdfstring{Tip \#1: Estimating Should be About
\emph{Estimating Pay
Off}}{Tip \#1: Estimating Should be About Estimating Pay Off}}\label{tip-1-estimating-should-be-about-estimating-pay-off}}

For a given action / road-map / business strategy, what Attendant Risks
are we going to have:

\begin{itemize}
\tightlist
\item
  What bets are we making about where the market will be?
\item
  What Communication Risk will we face explaining our product to people?
\item
  What Feature Fit risks are we likely to have when we get there?
\item
  What Complexity Risks will we face building our software? How can we
  avoid it ending up as a Big Ball Of Mud?
\item
  Where are we likely to face Boundary Risks and Dead End Risks
\end{itemize}

Instead of the Agile Estimation being about picking out a story-point
number based on some idealised amount of typing that needs to be done,
it should be about surfacing and weighing up risks. e.g:

\begin{itemize}
\tightlist
\item
  ``Adding this new database is problematic because it's going to
  massively increase our Dependency Risk.''
\item
  ``I don't think we should have component A interacting with component
  B because it'll introduce extra Communication Risk which we will
  always be tripping over.''
\item
  ``I worry we might not understand what the sales team want and are
  facing Feature Implementation Risk. How about we try and get agreement
  on a specification?''
\end{itemize}

\hypertarget{tip-2-the-risk-landscape-is-increasingly-complex-utilise-this}{%
\subsubsection{Tip \#2: The Risk Landscape is Increasingly Complex:
Utilise
This}\label{tip-2-the-risk-landscape-is-increasingly-complex-utilise-this}}

\begin{figure}
\centering
\includegraphics{images/estimates/central-line.png}
\caption{Journey via the Central Line\label{central-line.png}}
\end{figure}

If you were travelling across London from Ealing (in the West) to
Stratford (in the East) the \emph{fastest} route might be to take the
Central Line. You could do it via the A406 road, which would take a
\emph{bit} longer. It would \emph{feel} like you're mainly going in
completely the wrong direction doing that, but it's much faster than
cutting straight through London and you don't pay the congestion charge.

\begin{figure}
\centering
\includegraphics{images/estimates/car.png}
\caption{Journey by Car\label{car.png}}
\end{figure}

In terms of risk, they all have different profiles. You're often delayed
in the car, by some amount. The tube is \emph{generally} reliable, but
when it breaks down or is being repaired it might end up quicker to
walk.

If you were doing this same journey on foot, it's a very direct route,
but would take five times longer. However, if you were making this
journey a hundred years ago, that might be the way you chose (horseback
might be a bit faster).

\begin{figure}
\centering
\includegraphics{images/estimates/foot.png}
\caption{Journey on Foot\label{foot.png}}
\end{figure}

In the software development past, \emph{building it yourself} was the
only way to get anything done. It was like London \emph{before road and
rail}. Nowadays, you are bombarded with choices. It's actually
\emph{worse than London} because it's not even a two-dimensional
geographic space and there are multitudes of different routes and
acceptable destinations. Journey planning on the software Risk Landscape
is an optimisation problem \emph{par excellence}.

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/risk-landscape-400dpi.png}
\caption{Possible Moves On The Risk Landscape\label{risk-landscape.png}}
\end{figure}

Because the modern Risk Landscape is so complex:

\begin{itemize}
\tightlist
\item
  There can be orders of magnitude difference in \emph{time}, with very
  little difference in destination.
\item
  If it's Schedule Risk you're worried about, \emph{Code Yourself} isn't
  a great solution (for the whole thing, anyway). ``Take the tube'' and
  at least partly use something someone built already. There are
  probably multiple alternatives you can consider.
\item
  If no one has built something similar already, then why is that? Have
  you formulated the problem properly?
\item
  Going the wrong way is \emph{so much easier}.
\item
  Dead-Ends (like a broken Central Line) are much more likely to trip
  you up.
\item
  You need to keep up with developments in your field. Read widely.
\end{itemize}

\hypertarget{tip-3-meet-reality-early-on-the-biggest-risks}{%
\subsubsection{Tip \#3: Meet Reality Early on the Biggest
Risks}\label{tip-3-meet-reality-early-on-the-biggest-risks}}

In getting from A to B on the Risk Landscape, imagine that all the
Attendant Risks are the stages of a journey. Some might be on foot,
train, car and so on. In order for your course of action to work, all
the stages in the journey have to succeed.

Although you might have to make the steps of a journey in some order,
you can still mitigate risk in a different order. For example, checking
the trains are running, making sure your bike is working, booking
tickets and taxis, and so on.

The \emph{sensible} approach would be to test the steps \emph{in order
from weakest to strongest}. This means working out how to meet reality
for each risk in turn, in order from biggest risk to smallest.

Often, a \emph{strategy} will be broken up into multiple actions.
\emph{Which are the riskiest actions?} Figure this out, using the
Risk-First vocabulary and the best experience you can bring to bear,
then, perform the actions which Pay Off the biggest risks first.

As we saw from the ``10X Developer'' Saw, Learning Curve Risk and Dead
End Risk, are likely to be the biggest risks. How can we front-load this
and tackle these earlier?

\begin{itemize}
\tightlist
\item
  \emph{Having a vocabulary} (like the one Risk-First provides) allows
  us to \emph{at least talk about these}. e.g. ``I believe there is a
  Dead End Risk that we might not be able to get this software to run on
  Linux.''
\item
  Build mock-ups:

  \begin{itemize}
  \tightlist
  \item
    UI wireframes allow us to bottom out the Communication Risk of the
    interfaces we build.
  \item
    Spike Solutions allow us to de-risk algorithms and approaches before
    making them part of the main development.
  \item
    Test the market with these and meet reality early.
  \end{itemize}
\item
  Don't pick delivery dates far in the future. Collectively work out the
  biggest risks with your clients, and then arrange the next possible
  date to demonstrate the mitigation.
\item
  Do actions \emph{early} that are \emph{simple} but are nevertheless
  show-stoppers. They are as much a source of Hidden Risk as more
  obviously tricky actions.
\end{itemize}

\hypertarget{tip-4-talk-frankly-about-all-the-risks}{%
\subsubsection{Tip \#4: Talk Frankly About All The
Risks}\label{tip-4-talk-frankly-about-all-the-risks}}

Let's get back to Bill and Carl. What went wrong between points
\texttt{(1)} and \texttt{(2)}? Let's break it down:

\begin{itemize}
\tightlist
\item
  \textbf{Bill \emph{wants} the system in 3-4 months.} It doesn't
  happen.
\item
  \textbf{He says it ``must be delivered in 6 months'', but this doesn't
  happen either.} However, the world (and the project) doesn't end:
  \emph{it carries on}. What does this mean about the truth of his
  statement? Was he deliberately lying about the end date, or just
  espousing his view on the Schedule Risk?
\item
  \textbf{Carl's original estimate was 9 months.} Was he working to this
  all along? Did the initial brow-beating over deadlines at point
  \texttt{(1)} contribute to Agency Risk in a way that \emph{didn't}
  happen at point \texttt{(2)}?
\item
  \textbf{Why \emph{did} Bill get so angry?} His understanding of the
  Schedule Risk was, if anything, \emph{worse} than Carl's. It's not
  stated in the account, but it's likely the Trust Risk moved upwards:
  Did his superiors stop trusting him? Was his job at stake?
\item
  \textbf{How could including this risk in the discussion have improved
  the planning process?} Could the conversation have started like this
  instead?
\end{itemize}

\begin{quotation}

``I think it will take about 9 months, but that's just a rough estimate
at this point,'' Carl said. ``That's not going to work,'' Bill said. ``I
was hoping you'd say 3 or 4 months. I need to show the board something
by then or I'm worried they will lose confidence in me and this
project''.

\end{quotation}

\begin{quotation}

``OK,'' said Carl. ``But I'm really concerned we have huge Feature Fit
Risk. The task of understanding the requirements and doing the design is
massive.''

\end{quotation}

\begin{quotation}

``Well, in my head it's actually pretty simple,'' said Bill. ``Maybe I
don't have the full picture, or maybe your idea of what to build is more
complex than I think it needs to be. That's a massive risk right there
and I think we should try and mitigate it right now before things
progress. Maybe I'll need to go back to the board if it's worse than I
think.''

\end{quotation}

\begin{figure}
\centering
\includegraphics{images/generated/practices/estimates/bill2-400dpi.png}
\caption{Identifying The Action\label{bill2.png}}
\end{figure}

\hypertarget{tip-5-picture-worrying-futures}{%
\subsubsection{Tip \#5: Picture Worrying
Futures}\label{tip-5-picture-worrying-futures}}

The Bill/Carl problem is somewhat trivial (not to mention likely
fictional). How about one from real life? On a project I was working on
in November some years ago, we had two pieces of functionality we
needed: Bulk Uploads and Spock Integration. (It doesn't really matter
what these are). The bulk uploads would be useful \emph{now}. But, the
Spock Integration wasn't due until January. In the Spock estimation
meeting I wrote the following note:

\begin{quotation}

``Spock estimates were 4, 11 and 22 until we broke it down into tasks.
Now, estimates are above 55 for the whole piece. And worryingly, we
probably don't have all the tasks. We know we need bulk uploads in
November. Spock is January. So, do bulk uploads?''

\end{quotation}

The team \emph{wanted} to start Bulk Uploads work. After all, from these
estimates it looked like Spock could easily be completed in January.
However, the question should have been:

\begin{quotation}

``If it was February now, and we'd \emph{got nothing done}, what would
our biggest risk be?''

\end{quotation}

Missing Bulk Uploads wouldn't be a show-stopper, but missing Spock would
be a huge regulatory problem. \emph{Start work on the things you can't
miss.}

This is the essence of De-Risking.

\backmatter

\hypertarget{glossary}{%
\chapter{Glossary}\label{glossary}}

\hypertarget{abstraction}{%
\paragraph{Abstraction}\label{abstraction}}

The process of removing physical, spatial, or temporal details or
attributes in the study of objects or systems in order to more closely
attend to other details of interest.

\hypertarget{feedback-loop}{%
\section{Feedback Loop}\label{feedback-loop}}

\hypertarget{internal-model}{%
\section{Internal Model}\label{internal-model}}

\hypertarget{taking-action}{%
\section{Taking Action}\label{taking-action}}

The most common use for Internal Model is to refer to the model of
reality that you or I carry around in our heads. You can regard the
concept of Internal Model as being what you \emph{know} and what you
\emph{think} about a certain situation.

Obviously, because we've all had different experiences, and our brains
are wired up differently, everyone will have a different Internal Model
of reality.

Alternatively, we can use the term Internal Model to consider other
viewpoints: - Within an organisation, we might consider the Internal
Model of a \emph{team of people} to be the shared knowledge, values and
working practices of that team. - Within a software system, we might
consider the Internal Model of a single processor, and what knowledge it
has of the world. - A codebase is a team's Internal Model written down
and encoded as software.

An internal model \emph{represents} reality: reality is made of atoms,
whereas the internal model is information.

\hypertarget{meet-reality}{%
\section{Meet Reality}\label{meet-reality}}

\hypertarget{pay-off}{%
\section{Pay-Off}\label{pay-off}}

\hypertarget{risk}{%
\section{Risk}\label{risk}}

\hypertarget{risk-landscape}{%
\section{Risk Landscape}\label{risk-landscape}}

\hypertarget{goal-in-mind}{%
\subsection{Goal In Mind}\label{goal-in-mind}}

\hypertarget{initial-risk}{%
\subsection{Initial Risk}\label{initial-risk}}

\hypertarget{attendant-risk}{%
\subsection{Attendant Risk}\label{attendant-risk}}

\hypertarget{hidden-risk}{%
\subsection{Hidden Risk}\label{hidden-risk}}

\hypertarget{mitigated-risk}{%
\subsection{Mitigated Risk}\label{mitigated-risk}}

\end{document}  